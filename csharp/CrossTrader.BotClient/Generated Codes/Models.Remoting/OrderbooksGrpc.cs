// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: orderbooks.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace CrossTrader.Models.Remoting {
  internal static partial class OrderBookService
  {
    static readonly string __ServiceName = "crosstrader.OrderBookService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::CrossTrader.Models.Remoting.OrderBookRequest> __Marshaller_crosstrader_OrderBookRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CrossTrader.Models.Remoting.OrderBookRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::CrossTrader.Models.Remoting.OrderBookResponse> __Marshaller_crosstrader_OrderBookResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CrossTrader.Models.Remoting.OrderBookResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::CrossTrader.Models.Remoting.OrderBookSnapshotRequest> __Marshaller_crosstrader_OrderBookSnapshotRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CrossTrader.Models.Remoting.OrderBookSnapshotRequest.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::CrossTrader.Models.Remoting.OrderBookRequest, global::CrossTrader.Models.Remoting.OrderBookResponse> __Method_SubscribeOrderBook = new grpc::Method<global::CrossTrader.Models.Remoting.OrderBookRequest, global::CrossTrader.Models.Remoting.OrderBookResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SubscribeOrderBook",
        __Marshaller_crosstrader_OrderBookRequest,
        __Marshaller_crosstrader_OrderBookResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::CrossTrader.Models.Remoting.OrderBookSnapshotRequest, global::CrossTrader.Models.Remoting.OrderBookResponse> __Method_SubscribeOrderBookSnapshot = new grpc::Method<global::CrossTrader.Models.Remoting.OrderBookSnapshotRequest, global::CrossTrader.Models.Remoting.OrderBookResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SubscribeOrderBookSnapshot",
        __Marshaller_crosstrader_OrderBookSnapshotRequest,
        __Marshaller_crosstrader_OrderBookResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::CrossTrader.Models.Remoting.OrderbooksReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for OrderBookService</summary>
    public partial class OrderBookServiceClient : grpc::ClientBase<OrderBookServiceClient>
    {
      /// <summary>Creates a new client for OrderBookService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public OrderBookServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for OrderBookService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public OrderBookServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected OrderBookServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected OrderBookServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::CrossTrader.Models.Remoting.OrderBookResponse> SubscribeOrderBook(global::CrossTrader.Models.Remoting.OrderBookRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeOrderBook(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::CrossTrader.Models.Remoting.OrderBookResponse> SubscribeOrderBook(global::CrossTrader.Models.Remoting.OrderBookRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SubscribeOrderBook, null, options, request);
      }
      /// <summary>
      /// periodically streams snapshot of orderbook
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::CrossTrader.Models.Remoting.OrderBookResponse> SubscribeOrderBookSnapshot(global::CrossTrader.Models.Remoting.OrderBookSnapshotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeOrderBookSnapshot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// periodically streams snapshot of orderbook
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::CrossTrader.Models.Remoting.OrderBookResponse> SubscribeOrderBookSnapshot(global::CrossTrader.Models.Remoting.OrderBookSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SubscribeOrderBookSnapshot, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override OrderBookServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new OrderBookServiceClient(configuration);
      }
    }

  }
  internal static partial class UnifiedOrderBookService
  {
    static readonly string __ServiceName = "crosstrader.UnifiedOrderBookService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::CrossTrader.Models.Remoting.UnifiedOrderBookRequest> __Marshaller_crosstrader_UnifiedOrderBookRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CrossTrader.Models.Remoting.UnifiedOrderBookRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::CrossTrader.Models.Remoting.UnifiedOrderBookResponse> __Marshaller_crosstrader_UnifiedOrderBookResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CrossTrader.Models.Remoting.UnifiedOrderBookResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::CrossTrader.Models.Remoting.UnifiedOrderBookSnapshotRequest> __Marshaller_crosstrader_UnifiedOrderBookSnapshotRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::CrossTrader.Models.Remoting.UnifiedOrderBookSnapshotRequest.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::CrossTrader.Models.Remoting.UnifiedOrderBookRequest, global::CrossTrader.Models.Remoting.UnifiedOrderBookResponse> __Method_SubscribeUnifiedOrderBook = new grpc::Method<global::CrossTrader.Models.Remoting.UnifiedOrderBookRequest, global::CrossTrader.Models.Remoting.UnifiedOrderBookResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SubscribeUnifiedOrderBook",
        __Marshaller_crosstrader_UnifiedOrderBookRequest,
        __Marshaller_crosstrader_UnifiedOrderBookResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::CrossTrader.Models.Remoting.UnifiedOrderBookSnapshotRequest, global::CrossTrader.Models.Remoting.UnifiedOrderBookResponse> __Method_SubscribeUnifiedOrderBookSnapshot = new grpc::Method<global::CrossTrader.Models.Remoting.UnifiedOrderBookSnapshotRequest, global::CrossTrader.Models.Remoting.UnifiedOrderBookResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SubscribeUnifiedOrderBookSnapshot",
        __Marshaller_crosstrader_UnifiedOrderBookSnapshotRequest,
        __Marshaller_crosstrader_UnifiedOrderBookResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::CrossTrader.Models.Remoting.OrderbooksReflection.Descriptor.Services[1]; }
    }

    /// <summary>Client for UnifiedOrderBookService</summary>
    public partial class UnifiedOrderBookServiceClient : grpc::ClientBase<UnifiedOrderBookServiceClient>
    {
      /// <summary>Creates a new client for UnifiedOrderBookService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public UnifiedOrderBookServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for UnifiedOrderBookService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public UnifiedOrderBookServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected UnifiedOrderBookServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected UnifiedOrderBookServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// streams unified orderbook changes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::CrossTrader.Models.Remoting.UnifiedOrderBookResponse> SubscribeUnifiedOrderBook(global::CrossTrader.Models.Remoting.UnifiedOrderBookRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeUnifiedOrderBook(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// streams unified orderbook changes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::CrossTrader.Models.Remoting.UnifiedOrderBookResponse> SubscribeUnifiedOrderBook(global::CrossTrader.Models.Remoting.UnifiedOrderBookRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SubscribeUnifiedOrderBook, null, options, request);
      }
      /// <summary>
      /// periodically streams snapshot of unified orderbook 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::CrossTrader.Models.Remoting.UnifiedOrderBookResponse> SubscribeUnifiedOrderBookSnapshot(global::CrossTrader.Models.Remoting.UnifiedOrderBookSnapshotRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeUnifiedOrderBookSnapshot(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// periodically streams snapshot of unified orderbook 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::CrossTrader.Models.Remoting.UnifiedOrderBookResponse> SubscribeUnifiedOrderBookSnapshot(global::CrossTrader.Models.Remoting.UnifiedOrderBookSnapshotRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SubscribeUnifiedOrderBookSnapshot, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override UnifiedOrderBookServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new UnifiedOrderBookServiceClient(configuration);
      }
    }

  }
}
#endregion
