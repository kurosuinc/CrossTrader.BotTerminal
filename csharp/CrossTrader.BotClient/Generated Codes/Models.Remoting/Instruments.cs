// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: instruments.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace CrossTrader.Models.Remoting {

  /// <summary>Holder for reflection information generated from instruments.proto</summary>
  internal static partial class InstrumentsReflection {

    #region Descriptor
    /// <summary>File descriptor for instruments.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static InstrumentsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFpbnN0cnVtZW50cy5wcm90bxILY3Jvc3N0cmFkZXIaD2V4Y2hhbmdlcy5w",
            "cm90bxoMY29tbW9uLnByb3RvGhtnb29nbGUvcHJvdG9idWYvZW1wdHkucHJv",
            "dG8iewoTSW5zdHJ1bWVudHNSZXNwb25zZRIzCgtpbnN0cnVtZW50cxgBIAMo",
            "CzIeLmNyb3NzdHJhZGVyLkluc3RydW1lbnRNZXNzYWdlEi8KCWV4Y2hhbmdl",
            "cxgCIAMoCzIcLmNyb3NzdHJhZGVyLkV4Y2hhbmdlTWVzc2FnZSJ4ChJJbnN0",
            "cnVtZW50UmVzcG9uc2USMgoKaW5zdHJ1bWVudBgBIAEoCzIeLmNyb3NzdHJh",
            "ZGVyLkluc3RydW1lbnRNZXNzYWdlEi4KCGV4Y2hhbmdlGAIgASgLMhwuY3Jv",
            "c3N0cmFkZXIuRXhjaGFuZ2VNZXNzYWdlMqsBChFJbnN0cnVtZW50U2Vydmlj",
            "ZRJKCg5HZXRJbnN0cnVtZW50cxIWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eRog",
            "LmNyb3NzdHJhZGVyLkluc3RydW1lbnRzUmVzcG9uc2USSgoNR2V0SW5zdHJ1",
            "bWVudBIYLmNyb3NzdHJhZGVyLk5hbWVSZXF1ZXN0Gh8uY3Jvc3N0cmFkZXIu",
            "SW5zdHJ1bWVudFJlc3BvbnNlQh6qAhtDcm9zc1RyYWRlci5Nb2RlbHMuUmVt",
            "b3RpbmdiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::CrossTrader.Models.Remoting.ExchangesReflection.Descriptor, global::CrossTrader.Models.Remoting.CommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::CrossTrader.Models.Remoting.InstrumentsResponse), global::CrossTrader.Models.Remoting.InstrumentsResponse.Parser, new[]{ "Instruments", "Exchanges" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CrossTrader.Models.Remoting.InstrumentResponse), global::CrossTrader.Models.Remoting.InstrumentResponse.Parser, new[]{ "Instrument", "Exchange" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  internal sealed partial class InstrumentsResponse : pb::IMessage<InstrumentsResponse> {
    private static readonly pb::MessageParser<InstrumentsResponse> _parser = new pb::MessageParser<InstrumentsResponse>(() => new InstrumentsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InstrumentsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CrossTrader.Models.Remoting.InstrumentsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentsResponse(InstrumentsResponse other) : this() {
      instruments_ = other.instruments_.Clone();
      exchanges_ = other.exchanges_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentsResponse Clone() {
      return new InstrumentsResponse(this);
    }

    /// <summary>Field number for the "instruments" field.</summary>
    public const int InstrumentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::CrossTrader.Models.Remoting.InstrumentMessage> _repeated_instruments_codec
        = pb::FieldCodec.ForMessage(10, global::CrossTrader.Models.Remoting.InstrumentMessage.Parser);
    private readonly pbc::RepeatedField<global::CrossTrader.Models.Remoting.InstrumentMessage> instruments_ = new pbc::RepeatedField<global::CrossTrader.Models.Remoting.InstrumentMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CrossTrader.Models.Remoting.InstrumentMessage> Instruments {
      get { return instruments_; }
    }

    /// <summary>Field number for the "exchanges" field.</summary>
    public const int ExchangesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::CrossTrader.Models.Remoting.ExchangeMessage> _repeated_exchanges_codec
        = pb::FieldCodec.ForMessage(18, global::CrossTrader.Models.Remoting.ExchangeMessage.Parser);
    private readonly pbc::RepeatedField<global::CrossTrader.Models.Remoting.ExchangeMessage> exchanges_ = new pbc::RepeatedField<global::CrossTrader.Models.Remoting.ExchangeMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CrossTrader.Models.Remoting.ExchangeMessage> Exchanges {
      get { return exchanges_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InstrumentsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InstrumentsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!instruments_.Equals(other.instruments_)) return false;
      if(!exchanges_.Equals(other.exchanges_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= instruments_.GetHashCode();
      hash ^= exchanges_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      instruments_.WriteTo(output, _repeated_instruments_codec);
      exchanges_.WriteTo(output, _repeated_exchanges_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += instruments_.CalculateSize(_repeated_instruments_codec);
      size += exchanges_.CalculateSize(_repeated_exchanges_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InstrumentsResponse other) {
      if (other == null) {
        return;
      }
      instruments_.Add(other.instruments_);
      exchanges_.Add(other.exchanges_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            instruments_.AddEntriesFrom(input, _repeated_instruments_codec);
            break;
          }
          case 18: {
            exchanges_.AddEntriesFrom(input, _repeated_exchanges_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class InstrumentResponse : pb::IMessage<InstrumentResponse> {
    private static readonly pb::MessageParser<InstrumentResponse> _parser = new pb::MessageParser<InstrumentResponse>(() => new InstrumentResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InstrumentResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CrossTrader.Models.Remoting.InstrumentsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentResponse(InstrumentResponse other) : this() {
      instrument_ = other.instrument_ != null ? other.instrument_.Clone() : null;
      exchange_ = other.exchange_ != null ? other.exchange_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentResponse Clone() {
      return new InstrumentResponse(this);
    }

    /// <summary>Field number for the "instrument" field.</summary>
    public const int InstrumentFieldNumber = 1;
    private global::CrossTrader.Models.Remoting.InstrumentMessage instrument_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CrossTrader.Models.Remoting.InstrumentMessage Instrument {
      get { return instrument_; }
      set {
        instrument_ = value;
      }
    }

    /// <summary>Field number for the "exchange" field.</summary>
    public const int ExchangeFieldNumber = 2;
    private global::CrossTrader.Models.Remoting.ExchangeMessage exchange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CrossTrader.Models.Remoting.ExchangeMessage Exchange {
      get { return exchange_; }
      set {
        exchange_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InstrumentResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InstrumentResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Instrument, other.Instrument)) return false;
      if (!object.Equals(Exchange, other.Exchange)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (instrument_ != null) hash ^= Instrument.GetHashCode();
      if (exchange_ != null) hash ^= Exchange.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (instrument_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Instrument);
      }
      if (exchange_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Exchange);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (instrument_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Instrument);
      }
      if (exchange_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Exchange);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InstrumentResponse other) {
      if (other == null) {
        return;
      }
      if (other.instrument_ != null) {
        if (instrument_ == null) {
          Instrument = new global::CrossTrader.Models.Remoting.InstrumentMessage();
        }
        Instrument.MergeFrom(other.Instrument);
      }
      if (other.exchange_ != null) {
        if (exchange_ == null) {
          Exchange = new global::CrossTrader.Models.Remoting.ExchangeMessage();
        }
        Exchange.MergeFrom(other.Exchange);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (instrument_ == null) {
              Instrument = new global::CrossTrader.Models.Remoting.InstrumentMessage();
            }
            input.ReadMessage(Instrument);
            break;
          }
          case 18: {
            if (exchange_ == null) {
              Exchange = new global::CrossTrader.Models.Remoting.ExchangeMessage();
            }
            input.ReadMessage(Exchange);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
