// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: bitflyer/positions.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace CrossTrader.Models.Remoting.BitFlyer {

  /// <summary>Holder for reflection information generated from bitflyer/positions.proto</summary>
  internal static partial class PositionsReflection {

    #region Descriptor
    /// <summary>File descriptor for bitflyer/positions.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PositionsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhiaXRmbHllci9wb3NpdGlvbnMucHJvdG8SFGNyb3NzdHJhZGVyLmJpdGZs",
            "eWVyGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvGgxjb21tb24u",
            "cHJvdG8i/gEKD1Bvc2l0aW9uTWVzc2FnZRIkCgRzaWRlGAEgASgOMhYuY3Jv",
            "c3N0cmFkZXIuT3JkZXJTaWRlEg0KBXByaWNlGAIgASgBEgwKBHNpemUYAyAB",
            "KAESEgoKY29tbWlzc2lvbhgEIAEoARIdChVzd2FwX3BvaW50X2FjY3VtdWxh",
            "dGUYBSABKAESGgoScmVxdWlyZV9jb2xsYXRlcmFsGAYgASgBEi0KCW9wZW5f",
            "ZGF0ZRgHIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASEAoIbGV2",
            "ZXJhZ2UYCCABKAESCwoDcG5sGAkgASgBEgsKA3NmZBgKIAEoASJ5ChFQb3Np",
            "dGlvbnNSZXNwb25zZRIqCgZhY3Rpb24YASABKA4yGi5jcm9zc3RyYWRlci5D",
            "aGFuZ2VkQWN0aW9uEjgKCXBvc2l0aW9ucxgCIAMoCzIlLmNyb3NzdHJhZGVy",
            "LmJpdGZseWVyLlBvc2l0aW9uTWVzc2FnZTJ1ChBQb3NpdGlvbnNTZXJ2aWNl",
            "EmEKElN1YnNjcmliZVBvc2l0aW9ucxIgLmNyb3NzdHJhZGVyLkluc3RydW1l",
            "bnRJZFJlcXVlc3QaJy5jcm9zc3RyYWRlci5iaXRmbHllci5Qb3NpdGlvbnNS",
            "ZXNwb25zZTABQieqAiRDcm9zc1RyYWRlci5Nb2RlbHMuUmVtb3RpbmcuQml0",
            "Rmx5ZXJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::CrossTrader.Models.Remoting.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::CrossTrader.Models.Remoting.BitFlyer.PositionMessage), global::CrossTrader.Models.Remoting.BitFlyer.PositionMessage.Parser, new[]{ "Side", "Price", "Size", "Commission", "SwapPointAccumulate", "RequireCollateral", "OpenDate", "Leverage", "Pnl", "Sfd" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CrossTrader.Models.Remoting.BitFlyer.PositionsResponse), global::CrossTrader.Models.Remoting.BitFlyer.PositionsResponse.Parser, new[]{ "Action", "Positions" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  internal sealed partial class PositionMessage : pb::IMessage<PositionMessage> {
    private static readonly pb::MessageParser<PositionMessage> _parser = new pb::MessageParser<PositionMessage>(() => new PositionMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PositionMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CrossTrader.Models.Remoting.BitFlyer.PositionsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PositionMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PositionMessage(PositionMessage other) : this() {
      side_ = other.side_;
      price_ = other.price_;
      size_ = other.size_;
      commission_ = other.commission_;
      swapPointAccumulate_ = other.swapPointAccumulate_;
      requireCollateral_ = other.requireCollateral_;
      openDate_ = other.openDate_ != null ? other.openDate_.Clone() : null;
      leverage_ = other.leverage_;
      pnl_ = other.pnl_;
      sfd_ = other.sfd_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PositionMessage Clone() {
      return new PositionMessage(this);
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 1;
    private global::CrossTrader.Models.Remoting.OrderSide side_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CrossTrader.Models.Remoting.OrderSide Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 2;
    private double price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 3;
    private double size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "commission" field.</summary>
    public const int CommissionFieldNumber = 4;
    private double commission_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Commission {
      get { return commission_; }
      set {
        commission_ = value;
      }
    }

    /// <summary>Field number for the "swap_point_accumulate" field.</summary>
    public const int SwapPointAccumulateFieldNumber = 5;
    private double swapPointAccumulate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SwapPointAccumulate {
      get { return swapPointAccumulate_; }
      set {
        swapPointAccumulate_ = value;
      }
    }

    /// <summary>Field number for the "require_collateral" field.</summary>
    public const int RequireCollateralFieldNumber = 6;
    private double requireCollateral_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double RequireCollateral {
      get { return requireCollateral_; }
      set {
        requireCollateral_ = value;
      }
    }

    /// <summary>Field number for the "open_date" field.</summary>
    public const int OpenDateFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Timestamp openDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp OpenDate {
      get { return openDate_; }
      set {
        openDate_ = value;
      }
    }

    /// <summary>Field number for the "leverage" field.</summary>
    public const int LeverageFieldNumber = 8;
    private double leverage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Leverage {
      get { return leverage_; }
      set {
        leverage_ = value;
      }
    }

    /// <summary>Field number for the "pnl" field.</summary>
    public const int PnlFieldNumber = 9;
    private double pnl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Pnl {
      get { return pnl_; }
      set {
        pnl_ = value;
      }
    }

    /// <summary>Field number for the "sfd" field.</summary>
    public const int SfdFieldNumber = 10;
    private double sfd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Sfd {
      get { return sfd_; }
      set {
        sfd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PositionMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PositionMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Side != other.Side) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Price, other.Price)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Size, other.Size)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Commission, other.Commission)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SwapPointAccumulate, other.SwapPointAccumulate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(RequireCollateral, other.RequireCollateral)) return false;
      if (!object.Equals(OpenDate, other.OpenDate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Leverage, other.Leverage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Pnl, other.Pnl)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Sfd, other.Sfd)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Side != 0) hash ^= Side.GetHashCode();
      if (Price != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Price);
      if (Size != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Size);
      if (Commission != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Commission);
      if (SwapPointAccumulate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SwapPointAccumulate);
      if (RequireCollateral != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(RequireCollateral);
      if (openDate_ != null) hash ^= OpenDate.GetHashCode();
      if (Leverage != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Leverage);
      if (Pnl != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Pnl);
      if (Sfd != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Sfd);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Side != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Side);
      }
      if (Price != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Price);
      }
      if (Size != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Size);
      }
      if (Commission != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Commission);
      }
      if (SwapPointAccumulate != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(SwapPointAccumulate);
      }
      if (RequireCollateral != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(RequireCollateral);
      }
      if (openDate_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(OpenDate);
      }
      if (Leverage != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(Leverage);
      }
      if (Pnl != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(Pnl);
      }
      if (Sfd != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(Sfd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Side != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
      }
      if (Price != 0D) {
        size += 1 + 8;
      }
      if (Size != 0D) {
        size += 1 + 8;
      }
      if (Commission != 0D) {
        size += 1 + 8;
      }
      if (SwapPointAccumulate != 0D) {
        size += 1 + 8;
      }
      if (RequireCollateral != 0D) {
        size += 1 + 8;
      }
      if (openDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OpenDate);
      }
      if (Leverage != 0D) {
        size += 1 + 8;
      }
      if (Pnl != 0D) {
        size += 1 + 8;
      }
      if (Sfd != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PositionMessage other) {
      if (other == null) {
        return;
      }
      if (other.Side != 0) {
        Side = other.Side;
      }
      if (other.Price != 0D) {
        Price = other.Price;
      }
      if (other.Size != 0D) {
        Size = other.Size;
      }
      if (other.Commission != 0D) {
        Commission = other.Commission;
      }
      if (other.SwapPointAccumulate != 0D) {
        SwapPointAccumulate = other.SwapPointAccumulate;
      }
      if (other.RequireCollateral != 0D) {
        RequireCollateral = other.RequireCollateral;
      }
      if (other.openDate_ != null) {
        if (openDate_ == null) {
          OpenDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        OpenDate.MergeFrom(other.OpenDate);
      }
      if (other.Leverage != 0D) {
        Leverage = other.Leverage;
      }
      if (other.Pnl != 0D) {
        Pnl = other.Pnl;
      }
      if (other.Sfd != 0D) {
        Sfd = other.Sfd;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Side = (global::CrossTrader.Models.Remoting.OrderSide) input.ReadEnum();
            break;
          }
          case 17: {
            Price = input.ReadDouble();
            break;
          }
          case 25: {
            Size = input.ReadDouble();
            break;
          }
          case 33: {
            Commission = input.ReadDouble();
            break;
          }
          case 41: {
            SwapPointAccumulate = input.ReadDouble();
            break;
          }
          case 49: {
            RequireCollateral = input.ReadDouble();
            break;
          }
          case 58: {
            if (openDate_ == null) {
              OpenDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(OpenDate);
            break;
          }
          case 65: {
            Leverage = input.ReadDouble();
            break;
          }
          case 73: {
            Pnl = input.ReadDouble();
            break;
          }
          case 81: {
            Sfd = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class PositionsResponse : pb::IMessage<PositionsResponse> {
    private static readonly pb::MessageParser<PositionsResponse> _parser = new pb::MessageParser<PositionsResponse>(() => new PositionsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PositionsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CrossTrader.Models.Remoting.BitFlyer.PositionsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PositionsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PositionsResponse(PositionsResponse other) : this() {
      action_ = other.action_;
      positions_ = other.positions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PositionsResponse Clone() {
      return new PositionsResponse(this);
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 1;
    private global::CrossTrader.Models.Remoting.ChangedAction action_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CrossTrader.Models.Remoting.ChangedAction Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "positions" field.</summary>
    public const int PositionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::CrossTrader.Models.Remoting.BitFlyer.PositionMessage> _repeated_positions_codec
        = pb::FieldCodec.ForMessage(18, global::CrossTrader.Models.Remoting.BitFlyer.PositionMessage.Parser);
    private readonly pbc::RepeatedField<global::CrossTrader.Models.Remoting.BitFlyer.PositionMessage> positions_ = new pbc::RepeatedField<global::CrossTrader.Models.Remoting.BitFlyer.PositionMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CrossTrader.Models.Remoting.BitFlyer.PositionMessage> Positions {
      get { return positions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PositionsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PositionsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Action != other.Action) return false;
      if(!positions_.Equals(other.positions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Action != 0) hash ^= Action.GetHashCode();
      hash ^= positions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Action != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Action);
      }
      positions_.WriteTo(output, _repeated_positions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Action != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
      }
      size += positions_.CalculateSize(_repeated_positions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PositionsResponse other) {
      if (other == null) {
        return;
      }
      if (other.Action != 0) {
        Action = other.Action;
      }
      positions_.Add(other.positions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Action = (global::CrossTrader.Models.Remoting.ChangedAction) input.ReadEnum();
            break;
          }
          case 18: {
            positions_.AddEntriesFrom(input, _repeated_positions_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
