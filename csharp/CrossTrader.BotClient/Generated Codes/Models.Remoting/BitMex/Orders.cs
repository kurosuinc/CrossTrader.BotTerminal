// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: BitMEX/orders.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace CrossTrader.Models.Remoting.BitMex {

  /// <summary>Holder for reflection information generated from BitMEX/orders.proto</summary>
  internal static partial class OrdersReflection {

    #region Descriptor
    /// <summary>File descriptor for BitMEX/orders.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OrdersReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNCaXRNRVgvb3JkZXJzLnByb3RvEhJjcm9zc3RyYWRlci5iaXRtZXgaH2dv",
            "b2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8aDGNvbW1vbi5wcm90bxoY",
            "Qml0TUVYL2luc3RydW1lbnRzLnByb3RvIqQFCgxPcmRlck1lc3NhZ2USEAoI",
            "b3JkZXJfaWQYASABKAkSFwoPY2xpbmV0X29yZGVyX2lkGAIgASgJEhwKFGNs",
            "aW5ldF9vcmRlcl9saW5rX2lkGAMgASgJEiQKBHNpZGUYBCABKA4yFi5jcm9z",
            "c3RyYWRlci5PcmRlclNpZGUSHQoVc2ltcGxlX29yZGVyX3F1YW50aXR5GAUg",
            "ASgBEhYKDm9yZGVyX3F1YW50aXR5GAYgASgBEg0KBXByaWNlGAcgASgBEhgK",
            "EGRpc3BsYXlfcXVhbnRpdHkYCCABKAESEgoKc3RvcF9wcmljZRgJIAEoARIY",
            "ChBwZWdfb2Zmc2V0X3ZhbHVlGAogASgBEhYKDnBlZ19wcmljZV90eXBlGAsg",
            "ASgJEjEKCm9yZGVyX3R5cGUYDCABKA4yHS5jcm9zc3RyYWRlci5iaXRtZXgu",
            "T3JkZXJUeXBlEjYKDXRpbWVfaW5fZm9yY2UYDSABKA4yHy5jcm9zc3RyYWRl",
            "ci5iaXRtZXguVGltZUluRm9yY2USHQoVZXhlY3V0aW9uX2luc3RydWN0aW9u",
            "GA4gASgJEjUKDG9yZGVyX3N0YXR1cxgPIAEoDjIfLmNyb3NzdHJhZGVyLmJp",
            "dG1leC5PcmRlclN0YXR1cxIeChZzaW1wbGVfbGVhdmVzX3F1YW50aXR5GBAg",
            "ASgBEhcKD2xlYXZlc19xdWFudGl0eRgRIAEoARIVCg1hdmVyYWdlX3ByaWNl",
            "GBIgASgBEgwKBHRleHQYEyABKAkSMQoNdHJhbnNhY3RfdGltZRgUIAEoCzIa",
            "Lmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLQoJdGltZXN0YW1wGBUgASgL",
            "MhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcCJuCg5PcmRlcnNSZXNwb25z",
            "ZRIqCgZhY3Rpb24YASABKA4yGi5jcm9zc3RyYWRlci5DaGFuZ2VkQWN0aW9u",
            "EjAKBm9yZGVycxgCIAMoCzIgLmNyb3NzdHJhZGVyLmJpdG1leC5PcmRlck1l",
            "c3NhZ2UiqAMKD1Bvc2l0aW9uTWVzc2FnZRIQCghsZXZlcmFnZRgBIAEoARIU",
            "Cgxjcm9zc19tYXJnaW4YAiABKAgSNQoRb3BlbmluZ190aW1lc3RhbXAYAyAB",
            "KAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEh8KF29wZW5fb3JkZXJf",
            "YnV5X3F1YW50aXR5GAQgASgBEiAKGG9wZW5fb3JkZXJfc2VsbF9xdWFudGl0",
            "eRgFIAEoARIYChBjdXJyZW50X3F1YW50aXR5GAYgASgBEhQKDGN1cnJlbnRf",
            "Y29zdBgHIAEoARIZChFjdXJyZW50X2NvbW1pc2lvbhgIIAEoARIZChF1bnJl",
            "YWxpemVkX3Byb2ZpdBgJIAEoARIhChl1bnJlYWxpemVkX3Byb2ZpdF9wZXJj",
            "ZW50GAogASgBEh4KFnVucmVhbGl6ZWRfcm9lX3BlcmNlbnQYCyABKAESGwoT",
            "YXZlcmFnZV9lbnRyeV9wcmljZRgMIAEoARItCgl0aW1lc3RhbXAYDSABKAsy",
            "Gi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wIncKEVBvc2l0aW9uc1Jlc3Bv",
            "bnNlEioKBmFjdGlvbhgBIAEoDjIaLmNyb3NzdHJhZGVyLkNoYW5nZWRBY3Rp",
            "b24SNgoJcG9zaXRpb25zGAIgAygLMiMuY3Jvc3N0cmFkZXIuYml0bWV4LlBv",
            "c2l0aW9uTWVzc2FnZSqiAQoJT3JkZXJUeXBlEhMKD09SREVSX1RZUEVfTk9O",
            "RRAAEgoKBk1BUktFVBABEgkKBUxJTUlUEAISCAoEU1RPUBADEg4KClNUT1Bf",
            "TElNSVQQBBIVChFNQVJLRVRfSUZfVE9VQ0hFRBAFEhQKEExJTUlUX0lGX1RP",
            "VUNIRUQQBhIiCh5NQVJLRVRfV0lUSF9MRUZUX09WRVJfQVNfTElNSVQQBypv",
            "CgtUaW1lSW5Gb3JjZRIWChJUSU1FX0lOX0ZPUkNFX05PTkUQABIUChBHT09E",
            "X1RJTExfQ0FOQ0VMEAESFwoTSU1NRURJQVRFX09SX0NBTkNFTBACEhAKDEZJ",
            "TExfT1JfS0lMTBADEgcKA0RBWRAEKngKC09yZGVyU3RhdHVzEhUKEU9SREVS",
            "X1NUQVRVU19OT05FEAASBwoDTkVXEAESFAoQUEFSVElBTExZX0ZJTExFRBAC",
            "EgoKBkZJTExFRBADEgwKCENBTkNFTEVEEAQSDAoIUkVKRUNURUQQBRILCgdF",
            "WFBJUkVEEAYyywEKDU9yZGVyc1NlcnZpY2USWQoPU3Vic2NyaWJlT3JkZXJz",
            "EiAuY3Jvc3N0cmFkZXIuSW5zdHJ1bWVudElkUmVxdWVzdBoiLmNyb3NzdHJh",
            "ZGVyLmJpdG1leC5PcmRlcnNSZXNwb25zZTABEl8KElN1YnNjcmliZVBvc2l0",
            "aW9ucxIgLmNyb3NzdHJhZGVyLkluc3RydW1lbnRJZFJlcXVlc3QaJS5jcm9z",
            "c3RyYWRlci5iaXRtZXguUG9zaXRpb25zUmVzcG9uc2UwAUIlqgIiQ3Jvc3NU",
            "cmFkZXIuTW9kZWxzLlJlbW90aW5nLkJpdE1leGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::CrossTrader.Models.Remoting.CommonReflection.Descriptor, global::CrossTrader.Models.Remoting.BitMex.InstrumentsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::CrossTrader.Models.Remoting.BitMex.OrderType), typeof(global::CrossTrader.Models.Remoting.BitMex.TimeInForce), typeof(global::CrossTrader.Models.Remoting.BitMex.OrderStatus), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::CrossTrader.Models.Remoting.BitMex.OrderMessage), global::CrossTrader.Models.Remoting.BitMex.OrderMessage.Parser, new[]{ "OrderId", "ClinetOrderId", "ClinetOrderLinkId", "Side", "SimpleOrderQuantity", "OrderQuantity", "Price", "DisplayQuantity", "StopPrice", "PegOffsetValue", "PegPriceType", "OrderType", "TimeInForce", "ExecutionInstruction", "OrderStatus", "SimpleLeavesQuantity", "LeavesQuantity", "AveragePrice", "Text", "TransactTime", "Timestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CrossTrader.Models.Remoting.BitMex.OrdersResponse), global::CrossTrader.Models.Remoting.BitMex.OrdersResponse.Parser, new[]{ "Action", "Orders" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CrossTrader.Models.Remoting.BitMex.PositionMessage), global::CrossTrader.Models.Remoting.BitMex.PositionMessage.Parser, new[]{ "Leverage", "CrossMargin", "OpeningTimestamp", "OpenOrderBuyQuantity", "OpenOrderSellQuantity", "CurrentQuantity", "CurrentCost", "CurrentCommision", "UnrealizedProfit", "UnrealizedProfitPercent", "UnrealizedRoePercent", "AverageEntryPrice", "Timestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CrossTrader.Models.Remoting.BitMex.PositionsResponse), global::CrossTrader.Models.Remoting.BitMex.PositionsResponse.Parser, new[]{ "Action", "Positions" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  internal enum OrderType {
    [pbr::OriginalName("ORDER_TYPE_NONE")] None = 0,
    [pbr::OriginalName("MARKET")] Market = 1,
    [pbr::OriginalName("LIMIT")] Limit = 2,
    [pbr::OriginalName("STOP")] Stop = 3,
    [pbr::OriginalName("STOP_LIMIT")] StopLimit = 4,
    [pbr::OriginalName("MARKET_IF_TOUCHED")] MarketIfTouched = 5,
    [pbr::OriginalName("LIMIT_IF_TOUCHED")] LimitIfTouched = 6,
    [pbr::OriginalName("MARKET_WITH_LEFT_OVER_AS_LIMIT")] MarketWithLeftOverAsLimit = 7,
  }

  internal enum TimeInForce {
    [pbr::OriginalName("TIME_IN_FORCE_NONE")] None = 0,
    [pbr::OriginalName("GOOD_TILL_CANCEL")] GoodTillCancel = 1,
    [pbr::OriginalName("IMMEDIATE_OR_CANCEL")] ImmediateOrCancel = 2,
    [pbr::OriginalName("FILL_OR_KILL")] FillOrKill = 3,
    [pbr::OriginalName("DAY")] Day = 4,
  }

  internal enum OrderStatus {
    [pbr::OriginalName("ORDER_STATUS_NONE")] None = 0,
    [pbr::OriginalName("NEW")] New = 1,
    [pbr::OriginalName("PARTIALLY_FILLED")] PartiallyFilled = 2,
    [pbr::OriginalName("FILLED")] Filled = 3,
    [pbr::OriginalName("CANCELED")] Canceled = 4,
    [pbr::OriginalName("REJECTED")] Rejected = 5,
    [pbr::OriginalName("EXPIRED")] Expired = 6,
  }

  #endregion

  #region Messages
  internal sealed partial class OrderMessage : pb::IMessage<OrderMessage> {
    private static readonly pb::MessageParser<OrderMessage> _parser = new pb::MessageParser<OrderMessage>(() => new OrderMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrderMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CrossTrader.Models.Remoting.BitMex.OrdersReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderMessage(OrderMessage other) : this() {
      orderId_ = other.orderId_;
      clinetOrderId_ = other.clinetOrderId_;
      clinetOrderLinkId_ = other.clinetOrderLinkId_;
      side_ = other.side_;
      simpleOrderQuantity_ = other.simpleOrderQuantity_;
      orderQuantity_ = other.orderQuantity_;
      price_ = other.price_;
      displayQuantity_ = other.displayQuantity_;
      stopPrice_ = other.stopPrice_;
      pegOffsetValue_ = other.pegOffsetValue_;
      pegPriceType_ = other.pegPriceType_;
      orderType_ = other.orderType_;
      timeInForce_ = other.timeInForce_;
      executionInstruction_ = other.executionInstruction_;
      orderStatus_ = other.orderStatus_;
      simpleLeavesQuantity_ = other.simpleLeavesQuantity_;
      leavesQuantity_ = other.leavesQuantity_;
      averagePrice_ = other.averagePrice_;
      text_ = other.text_;
      transactTime_ = other.transactTime_ != null ? other.transactTime_.Clone() : null;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrderMessage Clone() {
      return new OrderMessage(this);
    }

    /// <summary>Field number for the "order_id" field.</summary>
    public const int OrderIdFieldNumber = 1;
    private string orderId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrderId {
      get { return orderId_; }
      set {
        orderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clinet_order_id" field.</summary>
    public const int ClinetOrderIdFieldNumber = 2;
    private string clinetOrderId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClinetOrderId {
      get { return clinetOrderId_; }
      set {
        clinetOrderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "clinet_order_link_id" field.</summary>
    public const int ClinetOrderLinkIdFieldNumber = 3;
    private string clinetOrderLinkId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClinetOrderLinkId {
      get { return clinetOrderLinkId_; }
      set {
        clinetOrderLinkId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 4;
    private global::CrossTrader.Models.Remoting.OrderSide side_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CrossTrader.Models.Remoting.OrderSide Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    /// <summary>Field number for the "simple_order_quantity" field.</summary>
    public const int SimpleOrderQuantityFieldNumber = 5;
    private double simpleOrderQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SimpleOrderQuantity {
      get { return simpleOrderQuantity_; }
      set {
        simpleOrderQuantity_ = value;
      }
    }

    /// <summary>Field number for the "order_quantity" field.</summary>
    public const int OrderQuantityFieldNumber = 6;
    private double orderQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double OrderQuantity {
      get { return orderQuantity_; }
      set {
        orderQuantity_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 7;
    private double price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "display_quantity" field.</summary>
    public const int DisplayQuantityFieldNumber = 8;
    private double displayQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DisplayQuantity {
      get { return displayQuantity_; }
      set {
        displayQuantity_ = value;
      }
    }

    /// <summary>Field number for the "stop_price" field.</summary>
    public const int StopPriceFieldNumber = 9;
    private double stopPrice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StopPrice {
      get { return stopPrice_; }
      set {
        stopPrice_ = value;
      }
    }

    /// <summary>Field number for the "peg_offset_value" field.</summary>
    public const int PegOffsetValueFieldNumber = 10;
    private double pegOffsetValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double PegOffsetValue {
      get { return pegOffsetValue_; }
      set {
        pegOffsetValue_ = value;
      }
    }

    /// <summary>Field number for the "peg_price_type" field.</summary>
    public const int PegPriceTypeFieldNumber = 11;
    private string pegPriceType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PegPriceType {
      get { return pegPriceType_; }
      set {
        pegPriceType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "order_type" field.</summary>
    public const int OrderTypeFieldNumber = 12;
    private global::CrossTrader.Models.Remoting.BitMex.OrderType orderType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CrossTrader.Models.Remoting.BitMex.OrderType OrderType {
      get { return orderType_; }
      set {
        orderType_ = value;
      }
    }

    /// <summary>Field number for the "time_in_force" field.</summary>
    public const int TimeInForceFieldNumber = 13;
    private global::CrossTrader.Models.Remoting.BitMex.TimeInForce timeInForce_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CrossTrader.Models.Remoting.BitMex.TimeInForce TimeInForce {
      get { return timeInForce_; }
      set {
        timeInForce_ = value;
      }
    }

    /// <summary>Field number for the "execution_instruction" field.</summary>
    public const int ExecutionInstructionFieldNumber = 14;
    private string executionInstruction_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExecutionInstruction {
      get { return executionInstruction_; }
      set {
        executionInstruction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "order_status" field.</summary>
    public const int OrderStatusFieldNumber = 15;
    private global::CrossTrader.Models.Remoting.BitMex.OrderStatus orderStatus_ = 0;
    /// <summary>
    /// string contingency_type =;
    /// string ex_destination =;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CrossTrader.Models.Remoting.BitMex.OrderStatus OrderStatus {
      get { return orderStatus_; }
      set {
        orderStatus_ = value;
      }
    }

    /// <summary>Field number for the "simple_leaves_quantity" field.</summary>
    public const int SimpleLeavesQuantityFieldNumber = 16;
    private double simpleLeavesQuantity_;
    /// <summary>
    /// string triggered =;
    /// string workingIndicator
    /// string ordRejReason
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SimpleLeavesQuantity {
      get { return simpleLeavesQuantity_; }
      set {
        simpleLeavesQuantity_ = value;
      }
    }

    /// <summary>Field number for the "leaves_quantity" field.</summary>
    public const int LeavesQuantityFieldNumber = 17;
    private double leavesQuantity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double LeavesQuantity {
      get { return leavesQuantity_; }
      set {
        leavesQuantity_ = value;
      }
    }

    /// <summary>Field number for the "average_price" field.</summary>
    public const int AveragePriceFieldNumber = 18;
    private double averagePrice_;
    /// <summary>
    /// SimpleCumQuantity
    /// CumQuantity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AveragePrice {
      get { return averagePrice_; }
      set {
        averagePrice_ = value;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 19;
    private string text_ = "";
    /// <summary>
    /// string multiLegReportingType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "transact_time" field.</summary>
    public const int TransactTimeFieldNumber = 20;
    private global::Google.Protobuf.WellKnownTypes.Timestamp transactTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp TransactTime {
      get { return transactTime_; }
      set {
        transactTime_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 21;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrderMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrderMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OrderId != other.OrderId) return false;
      if (ClinetOrderId != other.ClinetOrderId) return false;
      if (ClinetOrderLinkId != other.ClinetOrderLinkId) return false;
      if (Side != other.Side) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SimpleOrderQuantity, other.SimpleOrderQuantity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OrderQuantity, other.OrderQuantity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Price, other.Price)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DisplayQuantity, other.DisplayQuantity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StopPrice, other.StopPrice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PegOffsetValue, other.PegOffsetValue)) return false;
      if (PegPriceType != other.PegPriceType) return false;
      if (OrderType != other.OrderType) return false;
      if (TimeInForce != other.TimeInForce) return false;
      if (ExecutionInstruction != other.ExecutionInstruction) return false;
      if (OrderStatus != other.OrderStatus) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SimpleLeavesQuantity, other.SimpleLeavesQuantity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(LeavesQuantity, other.LeavesQuantity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AveragePrice, other.AveragePrice)) return false;
      if (Text != other.Text) return false;
      if (!object.Equals(TransactTime, other.TransactTime)) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OrderId.Length != 0) hash ^= OrderId.GetHashCode();
      if (ClinetOrderId.Length != 0) hash ^= ClinetOrderId.GetHashCode();
      if (ClinetOrderLinkId.Length != 0) hash ^= ClinetOrderLinkId.GetHashCode();
      if (Side != 0) hash ^= Side.GetHashCode();
      if (SimpleOrderQuantity != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SimpleOrderQuantity);
      if (OrderQuantity != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OrderQuantity);
      if (Price != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Price);
      if (DisplayQuantity != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DisplayQuantity);
      if (StopPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StopPrice);
      if (PegOffsetValue != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PegOffsetValue);
      if (PegPriceType.Length != 0) hash ^= PegPriceType.GetHashCode();
      if (OrderType != 0) hash ^= OrderType.GetHashCode();
      if (TimeInForce != 0) hash ^= TimeInForce.GetHashCode();
      if (ExecutionInstruction.Length != 0) hash ^= ExecutionInstruction.GetHashCode();
      if (OrderStatus != 0) hash ^= OrderStatus.GetHashCode();
      if (SimpleLeavesQuantity != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SimpleLeavesQuantity);
      if (LeavesQuantity != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(LeavesQuantity);
      if (AveragePrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AveragePrice);
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (transactTime_ != null) hash ^= TransactTime.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OrderId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(OrderId);
      }
      if (ClinetOrderId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ClinetOrderId);
      }
      if (ClinetOrderLinkId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClinetOrderLinkId);
      }
      if (Side != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Side);
      }
      if (SimpleOrderQuantity != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(SimpleOrderQuantity);
      }
      if (OrderQuantity != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(OrderQuantity);
      }
      if (Price != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(Price);
      }
      if (DisplayQuantity != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(DisplayQuantity);
      }
      if (StopPrice != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(StopPrice);
      }
      if (PegOffsetValue != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(PegOffsetValue);
      }
      if (PegPriceType.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(PegPriceType);
      }
      if (OrderType != 0) {
        output.WriteRawTag(96);
        output.WriteEnum((int) OrderType);
      }
      if (TimeInForce != 0) {
        output.WriteRawTag(104);
        output.WriteEnum((int) TimeInForce);
      }
      if (ExecutionInstruction.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(ExecutionInstruction);
      }
      if (OrderStatus != 0) {
        output.WriteRawTag(120);
        output.WriteEnum((int) OrderStatus);
      }
      if (SimpleLeavesQuantity != 0D) {
        output.WriteRawTag(129, 1);
        output.WriteDouble(SimpleLeavesQuantity);
      }
      if (LeavesQuantity != 0D) {
        output.WriteRawTag(137, 1);
        output.WriteDouble(LeavesQuantity);
      }
      if (AveragePrice != 0D) {
        output.WriteRawTag(145, 1);
        output.WriteDouble(AveragePrice);
      }
      if (Text.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(Text);
      }
      if (transactTime_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(TransactTime);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OrderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrderId);
      }
      if (ClinetOrderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClinetOrderId);
      }
      if (ClinetOrderLinkId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClinetOrderLinkId);
      }
      if (Side != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
      }
      if (SimpleOrderQuantity != 0D) {
        size += 1 + 8;
      }
      if (OrderQuantity != 0D) {
        size += 1 + 8;
      }
      if (Price != 0D) {
        size += 1 + 8;
      }
      if (DisplayQuantity != 0D) {
        size += 1 + 8;
      }
      if (StopPrice != 0D) {
        size += 1 + 8;
      }
      if (PegOffsetValue != 0D) {
        size += 1 + 8;
      }
      if (PegPriceType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PegPriceType);
      }
      if (OrderType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OrderType);
      }
      if (TimeInForce != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TimeInForce);
      }
      if (ExecutionInstruction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExecutionInstruction);
      }
      if (OrderStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OrderStatus);
      }
      if (SimpleLeavesQuantity != 0D) {
        size += 2 + 8;
      }
      if (LeavesQuantity != 0D) {
        size += 2 + 8;
      }
      if (AveragePrice != 0D) {
        size += 2 + 8;
      }
      if (Text.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (transactTime_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransactTime);
      }
      if (timestamp_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrderMessage other) {
      if (other == null) {
        return;
      }
      if (other.OrderId.Length != 0) {
        OrderId = other.OrderId;
      }
      if (other.ClinetOrderId.Length != 0) {
        ClinetOrderId = other.ClinetOrderId;
      }
      if (other.ClinetOrderLinkId.Length != 0) {
        ClinetOrderLinkId = other.ClinetOrderLinkId;
      }
      if (other.Side != 0) {
        Side = other.Side;
      }
      if (other.SimpleOrderQuantity != 0D) {
        SimpleOrderQuantity = other.SimpleOrderQuantity;
      }
      if (other.OrderQuantity != 0D) {
        OrderQuantity = other.OrderQuantity;
      }
      if (other.Price != 0D) {
        Price = other.Price;
      }
      if (other.DisplayQuantity != 0D) {
        DisplayQuantity = other.DisplayQuantity;
      }
      if (other.StopPrice != 0D) {
        StopPrice = other.StopPrice;
      }
      if (other.PegOffsetValue != 0D) {
        PegOffsetValue = other.PegOffsetValue;
      }
      if (other.PegPriceType.Length != 0) {
        PegPriceType = other.PegPriceType;
      }
      if (other.OrderType != 0) {
        OrderType = other.OrderType;
      }
      if (other.TimeInForce != 0) {
        TimeInForce = other.TimeInForce;
      }
      if (other.ExecutionInstruction.Length != 0) {
        ExecutionInstruction = other.ExecutionInstruction;
      }
      if (other.OrderStatus != 0) {
        OrderStatus = other.OrderStatus;
      }
      if (other.SimpleLeavesQuantity != 0D) {
        SimpleLeavesQuantity = other.SimpleLeavesQuantity;
      }
      if (other.LeavesQuantity != 0D) {
        LeavesQuantity = other.LeavesQuantity;
      }
      if (other.AveragePrice != 0D) {
        AveragePrice = other.AveragePrice;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      if (other.transactTime_ != null) {
        if (transactTime_ == null) {
          TransactTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        TransactTime.MergeFrom(other.TransactTime);
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            OrderId = input.ReadString();
            break;
          }
          case 18: {
            ClinetOrderId = input.ReadString();
            break;
          }
          case 26: {
            ClinetOrderLinkId = input.ReadString();
            break;
          }
          case 32: {
            Side = (global::CrossTrader.Models.Remoting.OrderSide) input.ReadEnum();
            break;
          }
          case 41: {
            SimpleOrderQuantity = input.ReadDouble();
            break;
          }
          case 49: {
            OrderQuantity = input.ReadDouble();
            break;
          }
          case 57: {
            Price = input.ReadDouble();
            break;
          }
          case 65: {
            DisplayQuantity = input.ReadDouble();
            break;
          }
          case 73: {
            StopPrice = input.ReadDouble();
            break;
          }
          case 81: {
            PegOffsetValue = input.ReadDouble();
            break;
          }
          case 90: {
            PegPriceType = input.ReadString();
            break;
          }
          case 96: {
            OrderType = (global::CrossTrader.Models.Remoting.BitMex.OrderType) input.ReadEnum();
            break;
          }
          case 104: {
            TimeInForce = (global::CrossTrader.Models.Remoting.BitMex.TimeInForce) input.ReadEnum();
            break;
          }
          case 114: {
            ExecutionInstruction = input.ReadString();
            break;
          }
          case 120: {
            OrderStatus = (global::CrossTrader.Models.Remoting.BitMex.OrderStatus) input.ReadEnum();
            break;
          }
          case 129: {
            SimpleLeavesQuantity = input.ReadDouble();
            break;
          }
          case 137: {
            LeavesQuantity = input.ReadDouble();
            break;
          }
          case 145: {
            AveragePrice = input.ReadDouble();
            break;
          }
          case 154: {
            Text = input.ReadString();
            break;
          }
          case 162: {
            if (transactTime_ == null) {
              TransactTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(TransactTime);
            break;
          }
          case 170: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class OrdersResponse : pb::IMessage<OrdersResponse> {
    private static readonly pb::MessageParser<OrdersResponse> _parser = new pb::MessageParser<OrdersResponse>(() => new OrdersResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OrdersResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CrossTrader.Models.Remoting.BitMex.OrdersReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrdersResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrdersResponse(OrdersResponse other) : this() {
      action_ = other.action_;
      orders_ = other.orders_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OrdersResponse Clone() {
      return new OrdersResponse(this);
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 1;
    private global::CrossTrader.Models.Remoting.ChangedAction action_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CrossTrader.Models.Remoting.ChangedAction Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "orders" field.</summary>
    public const int OrdersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::CrossTrader.Models.Remoting.BitMex.OrderMessage> _repeated_orders_codec
        = pb::FieldCodec.ForMessage(18, global::CrossTrader.Models.Remoting.BitMex.OrderMessage.Parser);
    private readonly pbc::RepeatedField<global::CrossTrader.Models.Remoting.BitMex.OrderMessage> orders_ = new pbc::RepeatedField<global::CrossTrader.Models.Remoting.BitMex.OrderMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CrossTrader.Models.Remoting.BitMex.OrderMessage> Orders {
      get { return orders_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OrdersResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OrdersResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Action != other.Action) return false;
      if(!orders_.Equals(other.orders_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Action != 0) hash ^= Action.GetHashCode();
      hash ^= orders_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Action != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Action);
      }
      orders_.WriteTo(output, _repeated_orders_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Action != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
      }
      size += orders_.CalculateSize(_repeated_orders_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OrdersResponse other) {
      if (other == null) {
        return;
      }
      if (other.Action != 0) {
        Action = other.Action;
      }
      orders_.Add(other.orders_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Action = (global::CrossTrader.Models.Remoting.ChangedAction) input.ReadEnum();
            break;
          }
          case 18: {
            orders_.AddEntriesFrom(input, _repeated_orders_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class PositionMessage : pb::IMessage<PositionMessage> {
    private static readonly pb::MessageParser<PositionMessage> _parser = new pb::MessageParser<PositionMessage>(() => new PositionMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PositionMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CrossTrader.Models.Remoting.BitMex.OrdersReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PositionMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PositionMessage(PositionMessage other) : this() {
      leverage_ = other.leverage_;
      crossMargin_ = other.crossMargin_;
      openingTimestamp_ = other.openingTimestamp_ != null ? other.openingTimestamp_.Clone() : null;
      openOrderBuyQuantity_ = other.openOrderBuyQuantity_;
      openOrderSellQuantity_ = other.openOrderSellQuantity_;
      currentQuantity_ = other.currentQuantity_;
      currentCost_ = other.currentCost_;
      currentCommision_ = other.currentCommision_;
      unrealizedProfit_ = other.unrealizedProfit_;
      unrealizedProfitPercent_ = other.unrealizedProfitPercent_;
      unrealizedRoePercent_ = other.unrealizedRoePercent_;
      averageEntryPrice_ = other.averageEntryPrice_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PositionMessage Clone() {
      return new PositionMessage(this);
    }

    /// <summary>Field number for the "leverage" field.</summary>
    public const int LeverageFieldNumber = 1;
    private double leverage_;
    /// <summary>
    ///    "commission": 0,
    ///    "initMarginReq": 0,
    ///    "maintMarginReq": 0,
    ///    "riskLimit": 0,
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Leverage {
      get { return leverage_; }
      set {
        leverage_ = value;
      }
    }

    /// <summary>Field number for the "cross_margin" field.</summary>
    public const int CrossMarginFieldNumber = 2;
    private bool crossMargin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CrossMargin {
      get { return crossMargin_; }
      set {
        crossMargin_ = value;
      }
    }

    /// <summary>Field number for the "opening_timestamp" field.</summary>
    public const int OpeningTimestampFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp openingTimestamp_;
    /// <summary>
    ///    "deleveragePercentile": 0,
    ///    "rebalancedPnl": 0,
    ///    "prevRealisedPnl": 0,
    ///    "prevUnrealisedPnl": 0,
    ///    "prevClosePrice": 0,
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp OpeningTimestamp {
      get { return openingTimestamp_; }
      set {
        openingTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "open_order_buy_quantity" field.</summary>
    public const int OpenOrderBuyQuantityFieldNumber = 4;
    private double openOrderBuyQuantity_;
    /// <summary>
    ///    "openingQty": 0,
    ///    "openingCost": 0,
    ///    "openingComm": 0,
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double OpenOrderBuyQuantity {
      get { return openOrderBuyQuantity_; }
      set {
        openOrderBuyQuantity_ = value;
      }
    }

    /// <summary>Field number for the "open_order_sell_quantity" field.</summary>
    public const int OpenOrderSellQuantityFieldNumber = 5;
    private double openOrderSellQuantity_;
    /// <summary>
    ///    "openOrderBuyCost": 0,
    ///    "openOrderBuyPremium": 0, 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double OpenOrderSellQuantity {
      get { return openOrderSellQuantity_; }
      set {
        openOrderSellQuantity_ = value;
      }
    }

    /// <summary>Field number for the "current_quantity" field.</summary>
    public const int CurrentQuantityFieldNumber = 6;
    private double currentQuantity_;
    /// <summary>
    ///    "openOrderSellCost": 0,
    ///    "openOrderSellPremium": 0,
    ///    "execBuyQty": 0,
    ///    "execBuyCost": 0,
    ///    "execSellQty": 0,
    ///    "execSellCost": 0,
    ///    "execQty": 0,
    ///    "execCost": 0,
    ///    "execComm": 0,
    ///    "currentTimestamp": "2019-06-11T09:27:28.138Z",
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CurrentQuantity {
      get { return currentQuantity_; }
      set {
        currentQuantity_ = value;
      }
    }

    /// <summary>Field number for the "current_cost" field.</summary>
    public const int CurrentCostFieldNumber = 7;
    private double currentCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CurrentCost {
      get { return currentCost_; }
      set {
        currentCost_ = value;
      }
    }

    /// <summary>Field number for the "current_commision" field.</summary>
    public const int CurrentCommisionFieldNumber = 8;
    private double currentCommision_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CurrentCommision {
      get { return currentCommision_; }
      set {
        currentCommision_ = value;
      }
    }

    /// <summary>Field number for the "unrealized_profit" field.</summary>
    public const int UnrealizedProfitFieldNumber = 9;
    private double unrealizedProfit_;
    /// <summary>
    ///    "realisedCost": 0,
    ///    "unrealisedCost": 0,
    ///    "grossOpenCost": 0,
    ///    "grossOpenPremium": 0,
    ///    "grossExecCost": 0,
    ///    "isOpen": true,
    ///    "markPrice": 0,
    ///    "markValue": 0,
    ///    "riskValue": 0,
    ///    "homeNotional": 0,
    ///    "foreignNotional": 0,
    ///    "posState": "string",
    ///    "posCost": 0,
    ///    "posCost2": 0,
    ///    "posCross": 0,
    ///    "posInit": 0,
    ///    "posComm": 0,
    ///    "posLoss": 0,
    ///    "posMargin": 0,
    ///    "posMaint": 0,
    ///    "posAllowance": 0,
    ///    "taxableMargin": 0,
    ///    "initMargin": 0,
    ///    "maintMargin": 0,
    ///    "sessionMargin": 0,
    ///    "targetExcessMargin": 0,
    ///    "varMargin": 0,
    ///    "realisedGrossPnl": 0,
    ///    "realisedTax": 0,
    ///    "realisedPnl": 0,
    ///    "unrealisedGrossPnl": 0,
    ///    "longBankrupt": 0,
    ///    "shortBankrupt": 0,
    ///    "taxBase": 0,
    ///    "indicativeTaxRate": 0,
    ///    "indicativeTax": 0,
    ///    "unrealisedTax": 0,
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double UnrealizedProfit {
      get { return unrealizedProfit_; }
      set {
        unrealizedProfit_ = value;
      }
    }

    /// <summary>Field number for the "unrealized_profit_percent" field.</summary>
    public const int UnrealizedProfitPercentFieldNumber = 10;
    private double unrealizedProfitPercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double UnrealizedProfitPercent {
      get { return unrealizedProfitPercent_; }
      set {
        unrealizedProfitPercent_ = value;
      }
    }

    /// <summary>Field number for the "unrealized_roe_percent" field.</summary>
    public const int UnrealizedRoePercentFieldNumber = 11;
    private double unrealizedRoePercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double UnrealizedRoePercent {
      get { return unrealizedRoePercent_; }
      set {
        unrealizedRoePercent_ = value;
      }
    }

    /// <summary>Field number for the "average_entry_price" field.</summary>
    public const int AverageEntryPriceFieldNumber = 12;
    private double averageEntryPrice_;
    /// <summary>
    ///    "simpleQty": 0,
    ///    "simpleCost": 0,
    ///    "simpleValue": 0,
    ///    "simplePnl": 0,
    ///    "simplePnlPcnt": 0,
    ///    "avgCostPrice": 0,
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AverageEntryPrice {
      get { return averageEntryPrice_; }
      set {
        averageEntryPrice_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 13;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    /// <summary>
    ///    "breakEvenPrice": 0,
    ///    "marginCallPrice": 0,
    ///    "liquidationPrice": 0,
    ///    "bankruptPrice": 0,
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PositionMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PositionMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Leverage, other.Leverage)) return false;
      if (CrossMargin != other.CrossMargin) return false;
      if (!object.Equals(OpeningTimestamp, other.OpeningTimestamp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OpenOrderBuyQuantity, other.OpenOrderBuyQuantity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OpenOrderSellQuantity, other.OpenOrderSellQuantity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CurrentQuantity, other.CurrentQuantity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CurrentCost, other.CurrentCost)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CurrentCommision, other.CurrentCommision)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UnrealizedProfit, other.UnrealizedProfit)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UnrealizedProfitPercent, other.UnrealizedProfitPercent)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(UnrealizedRoePercent, other.UnrealizedRoePercent)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AverageEntryPrice, other.AverageEntryPrice)) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Leverage != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Leverage);
      if (CrossMargin != false) hash ^= CrossMargin.GetHashCode();
      if (openingTimestamp_ != null) hash ^= OpeningTimestamp.GetHashCode();
      if (OpenOrderBuyQuantity != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OpenOrderBuyQuantity);
      if (OpenOrderSellQuantity != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OpenOrderSellQuantity);
      if (CurrentQuantity != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CurrentQuantity);
      if (CurrentCost != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CurrentCost);
      if (CurrentCommision != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CurrentCommision);
      if (UnrealizedProfit != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UnrealizedProfit);
      if (UnrealizedProfitPercent != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UnrealizedProfitPercent);
      if (UnrealizedRoePercent != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(UnrealizedRoePercent);
      if (AverageEntryPrice != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AverageEntryPrice);
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Leverage != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Leverage);
      }
      if (CrossMargin != false) {
        output.WriteRawTag(16);
        output.WriteBool(CrossMargin);
      }
      if (openingTimestamp_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(OpeningTimestamp);
      }
      if (OpenOrderBuyQuantity != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(OpenOrderBuyQuantity);
      }
      if (OpenOrderSellQuantity != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(OpenOrderSellQuantity);
      }
      if (CurrentQuantity != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(CurrentQuantity);
      }
      if (CurrentCost != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(CurrentCost);
      }
      if (CurrentCommision != 0D) {
        output.WriteRawTag(65);
        output.WriteDouble(CurrentCommision);
      }
      if (UnrealizedProfit != 0D) {
        output.WriteRawTag(73);
        output.WriteDouble(UnrealizedProfit);
      }
      if (UnrealizedProfitPercent != 0D) {
        output.WriteRawTag(81);
        output.WriteDouble(UnrealizedProfitPercent);
      }
      if (UnrealizedRoePercent != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(UnrealizedRoePercent);
      }
      if (AverageEntryPrice != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(AverageEntryPrice);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Leverage != 0D) {
        size += 1 + 8;
      }
      if (CrossMargin != false) {
        size += 1 + 1;
      }
      if (openingTimestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OpeningTimestamp);
      }
      if (OpenOrderBuyQuantity != 0D) {
        size += 1 + 8;
      }
      if (OpenOrderSellQuantity != 0D) {
        size += 1 + 8;
      }
      if (CurrentQuantity != 0D) {
        size += 1 + 8;
      }
      if (CurrentCost != 0D) {
        size += 1 + 8;
      }
      if (CurrentCommision != 0D) {
        size += 1 + 8;
      }
      if (UnrealizedProfit != 0D) {
        size += 1 + 8;
      }
      if (UnrealizedProfitPercent != 0D) {
        size += 1 + 8;
      }
      if (UnrealizedRoePercent != 0D) {
        size += 1 + 8;
      }
      if (AverageEntryPrice != 0D) {
        size += 1 + 8;
      }
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PositionMessage other) {
      if (other == null) {
        return;
      }
      if (other.Leverage != 0D) {
        Leverage = other.Leverage;
      }
      if (other.CrossMargin != false) {
        CrossMargin = other.CrossMargin;
      }
      if (other.openingTimestamp_ != null) {
        if (openingTimestamp_ == null) {
          OpeningTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        OpeningTimestamp.MergeFrom(other.OpeningTimestamp);
      }
      if (other.OpenOrderBuyQuantity != 0D) {
        OpenOrderBuyQuantity = other.OpenOrderBuyQuantity;
      }
      if (other.OpenOrderSellQuantity != 0D) {
        OpenOrderSellQuantity = other.OpenOrderSellQuantity;
      }
      if (other.CurrentQuantity != 0D) {
        CurrentQuantity = other.CurrentQuantity;
      }
      if (other.CurrentCost != 0D) {
        CurrentCost = other.CurrentCost;
      }
      if (other.CurrentCommision != 0D) {
        CurrentCommision = other.CurrentCommision;
      }
      if (other.UnrealizedProfit != 0D) {
        UnrealizedProfit = other.UnrealizedProfit;
      }
      if (other.UnrealizedProfitPercent != 0D) {
        UnrealizedProfitPercent = other.UnrealizedProfitPercent;
      }
      if (other.UnrealizedRoePercent != 0D) {
        UnrealizedRoePercent = other.UnrealizedRoePercent;
      }
      if (other.AverageEntryPrice != 0D) {
        AverageEntryPrice = other.AverageEntryPrice;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Leverage = input.ReadDouble();
            break;
          }
          case 16: {
            CrossMargin = input.ReadBool();
            break;
          }
          case 26: {
            if (openingTimestamp_ == null) {
              OpeningTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(OpeningTimestamp);
            break;
          }
          case 33: {
            OpenOrderBuyQuantity = input.ReadDouble();
            break;
          }
          case 41: {
            OpenOrderSellQuantity = input.ReadDouble();
            break;
          }
          case 49: {
            CurrentQuantity = input.ReadDouble();
            break;
          }
          case 57: {
            CurrentCost = input.ReadDouble();
            break;
          }
          case 65: {
            CurrentCommision = input.ReadDouble();
            break;
          }
          case 73: {
            UnrealizedProfit = input.ReadDouble();
            break;
          }
          case 81: {
            UnrealizedProfitPercent = input.ReadDouble();
            break;
          }
          case 89: {
            UnrealizedRoePercent = input.ReadDouble();
            break;
          }
          case 97: {
            AverageEntryPrice = input.ReadDouble();
            break;
          }
          case 106: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class PositionsResponse : pb::IMessage<PositionsResponse> {
    private static readonly pb::MessageParser<PositionsResponse> _parser = new pb::MessageParser<PositionsResponse>(() => new PositionsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PositionsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CrossTrader.Models.Remoting.BitMex.OrdersReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PositionsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PositionsResponse(PositionsResponse other) : this() {
      action_ = other.action_;
      positions_ = other.positions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PositionsResponse Clone() {
      return new PositionsResponse(this);
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 1;
    private global::CrossTrader.Models.Remoting.ChangedAction action_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CrossTrader.Models.Remoting.ChangedAction Action {
      get { return action_; }
      set {
        action_ = value;
      }
    }

    /// <summary>Field number for the "positions" field.</summary>
    public const int PositionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::CrossTrader.Models.Remoting.BitMex.PositionMessage> _repeated_positions_codec
        = pb::FieldCodec.ForMessage(18, global::CrossTrader.Models.Remoting.BitMex.PositionMessage.Parser);
    private readonly pbc::RepeatedField<global::CrossTrader.Models.Remoting.BitMex.PositionMessage> positions_ = new pbc::RepeatedField<global::CrossTrader.Models.Remoting.BitMex.PositionMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CrossTrader.Models.Remoting.BitMex.PositionMessage> Positions {
      get { return positions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PositionsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PositionsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Action != other.Action) return false;
      if(!positions_.Equals(other.positions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Action != 0) hash ^= Action.GetHashCode();
      hash ^= positions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Action != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Action);
      }
      positions_.WriteTo(output, _repeated_positions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Action != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
      }
      size += positions_.CalculateSize(_repeated_positions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PositionsResponse other) {
      if (other == null) {
        return;
      }
      if (other.Action != 0) {
        Action = other.Action;
      }
      positions_.Add(other.positions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Action = (global::CrossTrader.Models.Remoting.ChangedAction) input.ReadEnum();
            break;
          }
          case 18: {
            positions_.AddEntriesFrom(input, _repeated_positions_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
