// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: exchanges.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace CrossTrader.Models.Remoting {

  /// <summary>Holder for reflection information generated from exchanges.proto</summary>
  internal static partial class ExchangesReflection {

    #region Descriptor
    /// <summary>File descriptor for exchanges.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ExchangesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9leGNoYW5nZXMucHJvdG8SC2Nyb3NzdHJhZGVyGgxjb21tb24ucHJvdG8a",
            "G2dvb2dsZS9wcm90b2J1Zi9lbXB0eS5wcm90byJWCg9FeGNoYW5nZU1lc3Nh",
            "Z2USCgoCaWQYASABKAUSDAoEbmFtZRgCIAEoCRIUCgxkaXNwbGF5X25hbWUY",
            "AyABKAkSEwoLZGVzY3JpcHRpb24YBCABKAki0gMKEUluc3RydW1lbnRNZXNz",
            "YWdlEgoKAmlkGAEgASgFEhMKC2V4Y2hhbmdlX2lkGAIgASgFEgwKBG5hbWUY",
            "AyABKAkSFAoMZGlzcGxheV9uYW1lGAQgASgJEhMKC2Rlc2NyaXB0aW9uGAUg",
            "ASgJEhUKDWN1cnJlbmN5X2NvZGUYBiABKAkSFgoOY2FuX2dldF90aWNrZXIY",
            "ByABKAgSHAoUY2FuX3N1YnNjcmliZV90aWNrZXIYCCABKAgSGgoSY2FuX2dl",
            "dF9leGVjdXRpb25zGAkgASgIEiAKGGNhbl9zdWJzY3JpYmVfZXhlY3V0aW9u",
            "cxgKIAEoCBIVCg1zaXplX2RlY2ltYWxzGAsgASgFEhQKDG1pbmltdW1fc2l6",
            "ZRgMIAEoARIaChJpc19vcmRlcl9zdXBwb3J0ZWQYDSABKAgSFgoOY2FuX2dl",
            "dF9vcmRlcnMYDiABKAgSHAoUY2FuX3N1YnNjcmliZV9vcmRlcnMYDyABKAgS",
            "HQoVaXNfcG9zaXRpb25fc3VwcG9ydGVkGBAgASgIEhkKEWNhbl9nZXRfcG9z",
            "aXRpb25zGBEgASgIEh8KF2Nhbl9zdWJzY3JpYmVfcG9zaXRpb25zGBIgASgI",
            "IkQKEUV4Y2hhbmdlc1Jlc3BvbnNlEi8KCWV4Y2hhbmdlcxgBIAMoCzIcLmNy",
            "b3NzdHJhZGVyLkV4Y2hhbmdlTWVzc2FnZSJ3ChBFeGNoYW5nZVJlc3BvbnNl",
            "Ei4KCGV4Y2hhbmdlGAEgASgLMhwuY3Jvc3N0cmFkZXIuRXhjaGFuZ2VNZXNz",
            "YWdlEjMKC2luc3RydW1lbnRzGAIgAygLMh4uY3Jvc3N0cmFkZXIuSW5zdHJ1",
            "bWVudE1lc3NhZ2UyoQEKD0V4Y2hhbmdlU2VydmljZRJGCgxHZXRFeGNoYW5n",
            "ZXMSFi5nb29nbGUucHJvdG9idWYuRW1wdHkaHi5jcm9zc3RyYWRlci5FeGNo",
            "YW5nZXNSZXNwb25zZRJGCgtHZXRFeGNoYW5nZRIYLmNyb3NzdHJhZGVyLk5h",
            "bWVSZXF1ZXN0Gh0uY3Jvc3N0cmFkZXIuRXhjaGFuZ2VSZXNwb25zZUIeqgIb",
            "Q3Jvc3NUcmFkZXIuTW9kZWxzLlJlbW90aW5nYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::CrossTrader.Models.Remoting.CommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::CrossTrader.Models.Remoting.ExchangeMessage), global::CrossTrader.Models.Remoting.ExchangeMessage.Parser, new[]{ "Id", "Name", "DisplayName", "Description" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CrossTrader.Models.Remoting.InstrumentMessage), global::CrossTrader.Models.Remoting.InstrumentMessage.Parser, new[]{ "Id", "ExchangeId", "Name", "DisplayName", "Description", "CurrencyCode", "CanGetTicker", "CanSubscribeTicker", "CanGetExecutions", "CanSubscribeExecutions", "SizeDecimals", "MinimumSize", "IsOrderSupported", "CanGetOrders", "CanSubscribeOrders", "IsPositionSupported", "CanGetPositions", "CanSubscribePositions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CrossTrader.Models.Remoting.ExchangesResponse), global::CrossTrader.Models.Remoting.ExchangesResponse.Parser, new[]{ "Exchanges" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::CrossTrader.Models.Remoting.ExchangeResponse), global::CrossTrader.Models.Remoting.ExchangeResponse.Parser, new[]{ "Exchange", "Instruments" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  internal sealed partial class ExchangeMessage : pb::IMessage<ExchangeMessage> {
    private static readonly pb::MessageParser<ExchangeMessage> _parser = new pb::MessageParser<ExchangeMessage>(() => new ExchangeMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExchangeMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CrossTrader.Models.Remoting.ExchangesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeMessage(ExchangeMessage other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      displayName_ = other.displayName_;
      description_ = other.description_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeMessage Clone() {
      return new ExchangeMessage(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "display_name" field.</summary>
    public const int DisplayNameFieldNumber = 3;
    private string displayName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExchangeMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExchangeMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (DisplayName != other.DisplayName) return false;
      if (Description != other.Description) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DisplayName);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExchangeMessage other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            DisplayName = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class InstrumentMessage : pb::IMessage<InstrumentMessage> {
    private static readonly pb::MessageParser<InstrumentMessage> _parser = new pb::MessageParser<InstrumentMessage>(() => new InstrumentMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InstrumentMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CrossTrader.Models.Remoting.ExchangesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentMessage(InstrumentMessage other) : this() {
      id_ = other.id_;
      exchangeId_ = other.exchangeId_;
      name_ = other.name_;
      displayName_ = other.displayName_;
      description_ = other.description_;
      currencyCode_ = other.currencyCode_;
      canGetTicker_ = other.canGetTicker_;
      canSubscribeTicker_ = other.canSubscribeTicker_;
      canGetExecutions_ = other.canGetExecutions_;
      canSubscribeExecutions_ = other.canSubscribeExecutions_;
      sizeDecimals_ = other.sizeDecimals_;
      minimumSize_ = other.minimumSize_;
      isOrderSupported_ = other.isOrderSupported_;
      canGetOrders_ = other.canGetOrders_;
      canSubscribeOrders_ = other.canSubscribeOrders_;
      isPositionSupported_ = other.isPositionSupported_;
      canGetPositions_ = other.canGetPositions_;
      canSubscribePositions_ = other.canSubscribePositions_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InstrumentMessage Clone() {
      return new InstrumentMessage(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "exchange_id" field.</summary>
    public const int ExchangeIdFieldNumber = 2;
    private int exchangeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExchangeId {
      get { return exchangeId_; }
      set {
        exchangeId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "display_name" field.</summary>
    public const int DisplayNameFieldNumber = 4;
    private string displayName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 5;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "currency_code" field.</summary>
    public const int CurrencyCodeFieldNumber = 6;
    private string currencyCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrencyCode {
      get { return currencyCode_; }
      set {
        currencyCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "can_get_ticker" field.</summary>
    public const int CanGetTickerFieldNumber = 7;
    private bool canGetTicker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanGetTicker {
      get { return canGetTicker_; }
      set {
        canGetTicker_ = value;
      }
    }

    /// <summary>Field number for the "can_subscribe_ticker" field.</summary>
    public const int CanSubscribeTickerFieldNumber = 8;
    private bool canSubscribeTicker_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanSubscribeTicker {
      get { return canSubscribeTicker_; }
      set {
        canSubscribeTicker_ = value;
      }
    }

    /// <summary>Field number for the "can_get_executions" field.</summary>
    public const int CanGetExecutionsFieldNumber = 9;
    private bool canGetExecutions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanGetExecutions {
      get { return canGetExecutions_; }
      set {
        canGetExecutions_ = value;
      }
    }

    /// <summary>Field number for the "can_subscribe_executions" field.</summary>
    public const int CanSubscribeExecutionsFieldNumber = 10;
    private bool canSubscribeExecutions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanSubscribeExecutions {
      get { return canSubscribeExecutions_; }
      set {
        canSubscribeExecutions_ = value;
      }
    }

    /// <summary>Field number for the "size_decimals" field.</summary>
    public const int SizeDecimalsFieldNumber = 11;
    private int sizeDecimals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SizeDecimals {
      get { return sizeDecimals_; }
      set {
        sizeDecimals_ = value;
      }
    }

    /// <summary>Field number for the "minimum_size" field.</summary>
    public const int MinimumSizeFieldNumber = 12;
    private double minimumSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double MinimumSize {
      get { return minimumSize_; }
      set {
        minimumSize_ = value;
      }
    }

    /// <summary>Field number for the "is_order_supported" field.</summary>
    public const int IsOrderSupportedFieldNumber = 13;
    private bool isOrderSupported_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOrderSupported {
      get { return isOrderSupported_; }
      set {
        isOrderSupported_ = value;
      }
    }

    /// <summary>Field number for the "can_get_orders" field.</summary>
    public const int CanGetOrdersFieldNumber = 14;
    private bool canGetOrders_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanGetOrders {
      get { return canGetOrders_; }
      set {
        canGetOrders_ = value;
      }
    }

    /// <summary>Field number for the "can_subscribe_orders" field.</summary>
    public const int CanSubscribeOrdersFieldNumber = 15;
    private bool canSubscribeOrders_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanSubscribeOrders {
      get { return canSubscribeOrders_; }
      set {
        canSubscribeOrders_ = value;
      }
    }

    /// <summary>Field number for the "is_position_supported" field.</summary>
    public const int IsPositionSupportedFieldNumber = 16;
    private bool isPositionSupported_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPositionSupported {
      get { return isPositionSupported_; }
      set {
        isPositionSupported_ = value;
      }
    }

    /// <summary>Field number for the "can_get_positions" field.</summary>
    public const int CanGetPositionsFieldNumber = 17;
    private bool canGetPositions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanGetPositions {
      get { return canGetPositions_; }
      set {
        canGetPositions_ = value;
      }
    }

    /// <summary>Field number for the "can_subscribe_positions" field.</summary>
    public const int CanSubscribePositionsFieldNumber = 18;
    private bool canSubscribePositions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CanSubscribePositions {
      get { return canSubscribePositions_; }
      set {
        canSubscribePositions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InstrumentMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InstrumentMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ExchangeId != other.ExchangeId) return false;
      if (Name != other.Name) return false;
      if (DisplayName != other.DisplayName) return false;
      if (Description != other.Description) return false;
      if (CurrencyCode != other.CurrencyCode) return false;
      if (CanGetTicker != other.CanGetTicker) return false;
      if (CanSubscribeTicker != other.CanSubscribeTicker) return false;
      if (CanGetExecutions != other.CanGetExecutions) return false;
      if (CanSubscribeExecutions != other.CanSubscribeExecutions) return false;
      if (SizeDecimals != other.SizeDecimals) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MinimumSize, other.MinimumSize)) return false;
      if (IsOrderSupported != other.IsOrderSupported) return false;
      if (CanGetOrders != other.CanGetOrders) return false;
      if (CanSubscribeOrders != other.CanSubscribeOrders) return false;
      if (IsPositionSupported != other.IsPositionSupported) return false;
      if (CanGetPositions != other.CanGetPositions) return false;
      if (CanSubscribePositions != other.CanSubscribePositions) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (ExchangeId != 0) hash ^= ExchangeId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (CurrencyCode.Length != 0) hash ^= CurrencyCode.GetHashCode();
      if (CanGetTicker != false) hash ^= CanGetTicker.GetHashCode();
      if (CanSubscribeTicker != false) hash ^= CanSubscribeTicker.GetHashCode();
      if (CanGetExecutions != false) hash ^= CanGetExecutions.GetHashCode();
      if (CanSubscribeExecutions != false) hash ^= CanSubscribeExecutions.GetHashCode();
      if (SizeDecimals != 0) hash ^= SizeDecimals.GetHashCode();
      if (MinimumSize != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MinimumSize);
      if (IsOrderSupported != false) hash ^= IsOrderSupported.GetHashCode();
      if (CanGetOrders != false) hash ^= CanGetOrders.GetHashCode();
      if (CanSubscribeOrders != false) hash ^= CanSubscribeOrders.GetHashCode();
      if (IsPositionSupported != false) hash ^= IsPositionSupported.GetHashCode();
      if (CanGetPositions != false) hash ^= CanGetPositions.GetHashCode();
      if (CanSubscribePositions != false) hash ^= CanSubscribePositions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (ExchangeId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ExchangeId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DisplayName);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      if (CurrencyCode.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(CurrencyCode);
      }
      if (CanGetTicker != false) {
        output.WriteRawTag(56);
        output.WriteBool(CanGetTicker);
      }
      if (CanSubscribeTicker != false) {
        output.WriteRawTag(64);
        output.WriteBool(CanSubscribeTicker);
      }
      if (CanGetExecutions != false) {
        output.WriteRawTag(72);
        output.WriteBool(CanGetExecutions);
      }
      if (CanSubscribeExecutions != false) {
        output.WriteRawTag(80);
        output.WriteBool(CanSubscribeExecutions);
      }
      if (SizeDecimals != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(SizeDecimals);
      }
      if (MinimumSize != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(MinimumSize);
      }
      if (IsOrderSupported != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsOrderSupported);
      }
      if (CanGetOrders != false) {
        output.WriteRawTag(112);
        output.WriteBool(CanGetOrders);
      }
      if (CanSubscribeOrders != false) {
        output.WriteRawTag(120);
        output.WriteBool(CanSubscribeOrders);
      }
      if (IsPositionSupported != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(IsPositionSupported);
      }
      if (CanGetPositions != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(CanGetPositions);
      }
      if (CanSubscribePositions != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(CanSubscribePositions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (ExchangeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExchangeId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (CurrencyCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrencyCode);
      }
      if (CanGetTicker != false) {
        size += 1 + 1;
      }
      if (CanSubscribeTicker != false) {
        size += 1 + 1;
      }
      if (CanGetExecutions != false) {
        size += 1 + 1;
      }
      if (CanSubscribeExecutions != false) {
        size += 1 + 1;
      }
      if (SizeDecimals != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SizeDecimals);
      }
      if (MinimumSize != 0D) {
        size += 1 + 8;
      }
      if (IsOrderSupported != false) {
        size += 1 + 1;
      }
      if (CanGetOrders != false) {
        size += 1 + 1;
      }
      if (CanSubscribeOrders != false) {
        size += 1 + 1;
      }
      if (IsPositionSupported != false) {
        size += 2 + 1;
      }
      if (CanGetPositions != false) {
        size += 2 + 1;
      }
      if (CanSubscribePositions != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InstrumentMessage other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.ExchangeId != 0) {
        ExchangeId = other.ExchangeId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.CurrencyCode.Length != 0) {
        CurrencyCode = other.CurrencyCode;
      }
      if (other.CanGetTicker != false) {
        CanGetTicker = other.CanGetTicker;
      }
      if (other.CanSubscribeTicker != false) {
        CanSubscribeTicker = other.CanSubscribeTicker;
      }
      if (other.CanGetExecutions != false) {
        CanGetExecutions = other.CanGetExecutions;
      }
      if (other.CanSubscribeExecutions != false) {
        CanSubscribeExecutions = other.CanSubscribeExecutions;
      }
      if (other.SizeDecimals != 0) {
        SizeDecimals = other.SizeDecimals;
      }
      if (other.MinimumSize != 0D) {
        MinimumSize = other.MinimumSize;
      }
      if (other.IsOrderSupported != false) {
        IsOrderSupported = other.IsOrderSupported;
      }
      if (other.CanGetOrders != false) {
        CanGetOrders = other.CanGetOrders;
      }
      if (other.CanSubscribeOrders != false) {
        CanSubscribeOrders = other.CanSubscribeOrders;
      }
      if (other.IsPositionSupported != false) {
        IsPositionSupported = other.IsPositionSupported;
      }
      if (other.CanGetPositions != false) {
        CanGetPositions = other.CanGetPositions;
      }
      if (other.CanSubscribePositions != false) {
        CanSubscribePositions = other.CanSubscribePositions;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            ExchangeId = input.ReadInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            DisplayName = input.ReadString();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
          case 50: {
            CurrencyCode = input.ReadString();
            break;
          }
          case 56: {
            CanGetTicker = input.ReadBool();
            break;
          }
          case 64: {
            CanSubscribeTicker = input.ReadBool();
            break;
          }
          case 72: {
            CanGetExecutions = input.ReadBool();
            break;
          }
          case 80: {
            CanSubscribeExecutions = input.ReadBool();
            break;
          }
          case 88: {
            SizeDecimals = input.ReadInt32();
            break;
          }
          case 97: {
            MinimumSize = input.ReadDouble();
            break;
          }
          case 104: {
            IsOrderSupported = input.ReadBool();
            break;
          }
          case 112: {
            CanGetOrders = input.ReadBool();
            break;
          }
          case 120: {
            CanSubscribeOrders = input.ReadBool();
            break;
          }
          case 128: {
            IsPositionSupported = input.ReadBool();
            break;
          }
          case 136: {
            CanGetPositions = input.ReadBool();
            break;
          }
          case 144: {
            CanSubscribePositions = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ExchangesResponse : pb::IMessage<ExchangesResponse> {
    private static readonly pb::MessageParser<ExchangesResponse> _parser = new pb::MessageParser<ExchangesResponse>(() => new ExchangesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExchangesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CrossTrader.Models.Remoting.ExchangesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangesResponse(ExchangesResponse other) : this() {
      exchanges_ = other.exchanges_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangesResponse Clone() {
      return new ExchangesResponse(this);
    }

    /// <summary>Field number for the "exchanges" field.</summary>
    public const int ExchangesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::CrossTrader.Models.Remoting.ExchangeMessage> _repeated_exchanges_codec
        = pb::FieldCodec.ForMessage(10, global::CrossTrader.Models.Remoting.ExchangeMessage.Parser);
    private readonly pbc::RepeatedField<global::CrossTrader.Models.Remoting.ExchangeMessage> exchanges_ = new pbc::RepeatedField<global::CrossTrader.Models.Remoting.ExchangeMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CrossTrader.Models.Remoting.ExchangeMessage> Exchanges {
      get { return exchanges_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExchangesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExchangesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!exchanges_.Equals(other.exchanges_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= exchanges_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      exchanges_.WriteTo(output, _repeated_exchanges_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += exchanges_.CalculateSize(_repeated_exchanges_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExchangesResponse other) {
      if (other == null) {
        return;
      }
      exchanges_.Add(other.exchanges_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            exchanges_.AddEntriesFrom(input, _repeated_exchanges_codec);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ExchangeResponse : pb::IMessage<ExchangeResponse> {
    private static readonly pb::MessageParser<ExchangeResponse> _parser = new pb::MessageParser<ExchangeResponse>(() => new ExchangeResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExchangeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::CrossTrader.Models.Remoting.ExchangesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeResponse(ExchangeResponse other) : this() {
      exchange_ = other.exchange_ != null ? other.exchange_.Clone() : null;
      instruments_ = other.instruments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExchangeResponse Clone() {
      return new ExchangeResponse(this);
    }

    /// <summary>Field number for the "exchange" field.</summary>
    public const int ExchangeFieldNumber = 1;
    private global::CrossTrader.Models.Remoting.ExchangeMessage exchange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::CrossTrader.Models.Remoting.ExchangeMessage Exchange {
      get { return exchange_; }
      set {
        exchange_ = value;
      }
    }

    /// <summary>Field number for the "instruments" field.</summary>
    public const int InstrumentsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::CrossTrader.Models.Remoting.InstrumentMessage> _repeated_instruments_codec
        = pb::FieldCodec.ForMessage(18, global::CrossTrader.Models.Remoting.InstrumentMessage.Parser);
    private readonly pbc::RepeatedField<global::CrossTrader.Models.Remoting.InstrumentMessage> instruments_ = new pbc::RepeatedField<global::CrossTrader.Models.Remoting.InstrumentMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::CrossTrader.Models.Remoting.InstrumentMessage> Instruments {
      get { return instruments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExchangeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExchangeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Exchange, other.Exchange)) return false;
      if(!instruments_.Equals(other.instruments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (exchange_ != null) hash ^= Exchange.GetHashCode();
      hash ^= instruments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (exchange_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Exchange);
      }
      instruments_.WriteTo(output, _repeated_instruments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (exchange_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Exchange);
      }
      size += instruments_.CalculateSize(_repeated_instruments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExchangeResponse other) {
      if (other == null) {
        return;
      }
      if (other.exchange_ != null) {
        if (exchange_ == null) {
          Exchange = new global::CrossTrader.Models.Remoting.ExchangeMessage();
        }
        Exchange.MergeFrom(other.Exchange);
      }
      instruments_.Add(other.instruments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (exchange_ == null) {
              Exchange = new global::CrossTrader.Models.Remoting.ExchangeMessage();
            }
            input.ReadMessage(Exchange);
            break;
          }
          case 18: {
            instruments_.AddEntriesFrom(input, _repeated_instruments_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
