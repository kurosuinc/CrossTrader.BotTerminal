// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: orders.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace CrossTrader.Models.Remoting {
  internal static partial class OrdersService
  {
    static readonly string __ServiceName = "crosstrader.OrdersService";

    static readonly grpc::Marshaller<global::CrossTrader.Models.Remoting.OrdersRequest> __Marshaller_crosstrader_OrdersRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::CrossTrader.Models.Remoting.OrdersRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::CrossTrader.Models.Remoting.OrdersMessage> __Marshaller_crosstrader_OrdersMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::CrossTrader.Models.Remoting.OrdersMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::CrossTrader.Models.Remoting.InstrumentIdRequest> __Marshaller_crosstrader_InstrumentIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::CrossTrader.Models.Remoting.InstrumentIdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::CrossTrader.Models.Remoting.PositionsMessage> __Marshaller_crosstrader_PositionsMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::CrossTrader.Models.Remoting.PositionsMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::CrossTrader.Models.Remoting.MarketOrderRequest> __Marshaller_crosstrader_MarketOrderRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::CrossTrader.Models.Remoting.MarketOrderRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::CrossTrader.Models.Remoting.OrderIdResponse> __Marshaller_crosstrader_OrderIdResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::CrossTrader.Models.Remoting.OrderIdResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::CrossTrader.Models.Remoting.LimitOrderRequest> __Marshaller_crosstrader_LimitOrderRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::CrossTrader.Models.Remoting.LimitOrderRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::CrossTrader.Models.Remoting.OrderCancellationRequest> __Marshaller_crosstrader_OrderCancellationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::CrossTrader.Models.Remoting.OrderCancellationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::CrossTrader.Models.Remoting.OrderCancellationResponse> __Marshaller_crosstrader_OrderCancellationResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::CrossTrader.Models.Remoting.OrderCancellationResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::CrossTrader.Models.Remoting.EntireOrderCancellationRequest> __Marshaller_crosstrader_EntireOrderCancellationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::CrossTrader.Models.Remoting.EntireOrderCancellationRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::CrossTrader.Models.Remoting.OrdersRequest, global::CrossTrader.Models.Remoting.OrdersMessage> __Method_getOrders = new grpc::Method<global::CrossTrader.Models.Remoting.OrdersRequest, global::CrossTrader.Models.Remoting.OrdersMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getOrders",
        __Marshaller_crosstrader_OrdersRequest,
        __Marshaller_crosstrader_OrdersMessage);

    static readonly grpc::Method<global::CrossTrader.Models.Remoting.InstrumentIdRequest, global::CrossTrader.Models.Remoting.OrdersMessage> __Method_subscribeOrders = new grpc::Method<global::CrossTrader.Models.Remoting.InstrumentIdRequest, global::CrossTrader.Models.Remoting.OrdersMessage>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "subscribeOrders",
        __Marshaller_crosstrader_InstrumentIdRequest,
        __Marshaller_crosstrader_OrdersMessage);

    static readonly grpc::Method<global::CrossTrader.Models.Remoting.InstrumentIdRequest, global::CrossTrader.Models.Remoting.PositionsMessage> __Method_getPositions = new grpc::Method<global::CrossTrader.Models.Remoting.InstrumentIdRequest, global::CrossTrader.Models.Remoting.PositionsMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getPositions",
        __Marshaller_crosstrader_InstrumentIdRequest,
        __Marshaller_crosstrader_PositionsMessage);

    static readonly grpc::Method<global::CrossTrader.Models.Remoting.InstrumentIdRequest, global::CrossTrader.Models.Remoting.PositionsMessage> __Method_subscribePositions = new grpc::Method<global::CrossTrader.Models.Remoting.InstrumentIdRequest, global::CrossTrader.Models.Remoting.PositionsMessage>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "subscribePositions",
        __Marshaller_crosstrader_InstrumentIdRequest,
        __Marshaller_crosstrader_PositionsMessage);

    static readonly grpc::Method<global::CrossTrader.Models.Remoting.MarketOrderRequest, global::CrossTrader.Models.Remoting.OrderIdResponse> __Method_marketOrder = new grpc::Method<global::CrossTrader.Models.Remoting.MarketOrderRequest, global::CrossTrader.Models.Remoting.OrderIdResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "marketOrder",
        __Marshaller_crosstrader_MarketOrderRequest,
        __Marshaller_crosstrader_OrderIdResponse);

    static readonly grpc::Method<global::CrossTrader.Models.Remoting.LimitOrderRequest, global::CrossTrader.Models.Remoting.OrderIdResponse> __Method_limitOrder = new grpc::Method<global::CrossTrader.Models.Remoting.LimitOrderRequest, global::CrossTrader.Models.Remoting.OrderIdResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "limitOrder",
        __Marshaller_crosstrader_LimitOrderRequest,
        __Marshaller_crosstrader_OrderIdResponse);

    static readonly grpc::Method<global::CrossTrader.Models.Remoting.OrderCancellationRequest, global::CrossTrader.Models.Remoting.OrderCancellationResponse> __Method_cancelOrder = new grpc::Method<global::CrossTrader.Models.Remoting.OrderCancellationRequest, global::CrossTrader.Models.Remoting.OrderCancellationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "cancelOrder",
        __Marshaller_crosstrader_OrderCancellationRequest,
        __Marshaller_crosstrader_OrderCancellationResponse);

    static readonly grpc::Method<global::CrossTrader.Models.Remoting.EntireOrderCancellationRequest, global::CrossTrader.Models.Remoting.OrderCancellationResponse> __Method_cancelAllOrder = new grpc::Method<global::CrossTrader.Models.Remoting.EntireOrderCancellationRequest, global::CrossTrader.Models.Remoting.OrderCancellationResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "cancelAllOrder",
        __Marshaller_crosstrader_EntireOrderCancellationRequest,
        __Marshaller_crosstrader_OrderCancellationResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::CrossTrader.Models.Remoting.OrdersReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for OrdersService</summary>
    public partial class OrdersServiceClient : grpc::ClientBase<OrdersServiceClient>
    {
      /// <summary>Creates a new client for OrdersService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public OrdersServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for OrdersService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public OrdersServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected OrdersServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected OrdersServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CrossTrader.Models.Remoting.OrdersMessage getOrders(global::CrossTrader.Models.Remoting.OrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getOrders(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CrossTrader.Models.Remoting.OrdersMessage getOrders(global::CrossTrader.Models.Remoting.OrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getOrders, null, options, request);
      }
      /// <summary>
      /// Orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CrossTrader.Models.Remoting.OrdersMessage> getOrdersAsync(global::CrossTrader.Models.Remoting.OrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getOrdersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CrossTrader.Models.Remoting.OrdersMessage> getOrdersAsync(global::CrossTrader.Models.Remoting.OrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getOrders, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::CrossTrader.Models.Remoting.OrdersMessage> subscribeOrders(global::CrossTrader.Models.Remoting.InstrumentIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return subscribeOrders(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::CrossTrader.Models.Remoting.OrdersMessage> subscribeOrders(global::CrossTrader.Models.Remoting.InstrumentIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_subscribeOrders, null, options, request);
      }
      /// <summary>
      /// Positions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CrossTrader.Models.Remoting.PositionsMessage getPositions(global::CrossTrader.Models.Remoting.InstrumentIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getPositions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Positions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CrossTrader.Models.Remoting.PositionsMessage getPositions(global::CrossTrader.Models.Remoting.InstrumentIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getPositions, null, options, request);
      }
      /// <summary>
      /// Positions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CrossTrader.Models.Remoting.PositionsMessage> getPositionsAsync(global::CrossTrader.Models.Remoting.InstrumentIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getPositionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Positions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CrossTrader.Models.Remoting.PositionsMessage> getPositionsAsync(global::CrossTrader.Models.Remoting.InstrumentIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getPositions, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::CrossTrader.Models.Remoting.PositionsMessage> subscribePositions(global::CrossTrader.Models.Remoting.InstrumentIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return subscribePositions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::CrossTrader.Models.Remoting.PositionsMessage> subscribePositions(global::CrossTrader.Models.Remoting.InstrumentIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_subscribePositions, null, options, request);
      }
      /// <summary>
      /// Ordering
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CrossTrader.Models.Remoting.OrderIdResponse marketOrder(global::CrossTrader.Models.Remoting.MarketOrderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return marketOrder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Ordering
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CrossTrader.Models.Remoting.OrderIdResponse marketOrder(global::CrossTrader.Models.Remoting.MarketOrderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_marketOrder, null, options, request);
      }
      /// <summary>
      /// Ordering
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CrossTrader.Models.Remoting.OrderIdResponse> marketOrderAsync(global::CrossTrader.Models.Remoting.MarketOrderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return marketOrderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Ordering
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CrossTrader.Models.Remoting.OrderIdResponse> marketOrderAsync(global::CrossTrader.Models.Remoting.MarketOrderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_marketOrder, null, options, request);
      }
      public virtual global::CrossTrader.Models.Remoting.OrderIdResponse limitOrder(global::CrossTrader.Models.Remoting.LimitOrderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return limitOrder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::CrossTrader.Models.Remoting.OrderIdResponse limitOrder(global::CrossTrader.Models.Remoting.LimitOrderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_limitOrder, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::CrossTrader.Models.Remoting.OrderIdResponse> limitOrderAsync(global::CrossTrader.Models.Remoting.LimitOrderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return limitOrderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::CrossTrader.Models.Remoting.OrderIdResponse> limitOrderAsync(global::CrossTrader.Models.Remoting.LimitOrderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_limitOrder, null, options, request);
      }
      public virtual global::CrossTrader.Models.Remoting.OrderCancellationResponse cancelOrder(global::CrossTrader.Models.Remoting.OrderCancellationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return cancelOrder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::CrossTrader.Models.Remoting.OrderCancellationResponse cancelOrder(global::CrossTrader.Models.Remoting.OrderCancellationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_cancelOrder, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::CrossTrader.Models.Remoting.OrderCancellationResponse> cancelOrderAsync(global::CrossTrader.Models.Remoting.OrderCancellationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return cancelOrderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::CrossTrader.Models.Remoting.OrderCancellationResponse> cancelOrderAsync(global::CrossTrader.Models.Remoting.OrderCancellationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_cancelOrder, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::CrossTrader.Models.Remoting.OrderCancellationResponse> cancelAllOrder(global::CrossTrader.Models.Remoting.EntireOrderCancellationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return cancelAllOrder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::CrossTrader.Models.Remoting.OrderCancellationResponse> cancelAllOrder(global::CrossTrader.Models.Remoting.EntireOrderCancellationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_cancelAllOrder, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override OrdersServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new OrdersServiceClient(configuration);
      }
    }

  }
}
#endregion
