// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: orders.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace CrossTrader.Models.Remoting {
  internal static partial class OrdersService
  {
    static readonly string __ServiceName = "crosstrader.OrdersService";

    static readonly grpc::Marshaller<global::CrossTrader.Models.Remoting.OrdersRequest> __Marshaller_crosstrader_OrdersRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::CrossTrader.Models.Remoting.OrdersRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::CrossTrader.Models.Remoting.OrdersResponse> __Marshaller_crosstrader_OrdersResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::CrossTrader.Models.Remoting.OrdersResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::CrossTrader.Models.Remoting.InstrumentIdRequest> __Marshaller_crosstrader_InstrumentIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::CrossTrader.Models.Remoting.InstrumentIdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::CrossTrader.Models.Remoting.PostOrderRequest> __Marshaller_crosstrader_PostOrderRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::CrossTrader.Models.Remoting.PostOrderRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::CrossTrader.Models.Remoting.OrderMessage> __Marshaller_crosstrader_OrderMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::CrossTrader.Models.Remoting.OrderMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::CrossTrader.Models.Remoting.OrderCancellationRequest> __Marshaller_crosstrader_OrderCancellationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::CrossTrader.Models.Remoting.OrderCancellationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::CrossTrader.Models.Remoting.OrderCancellationResponse> __Marshaller_crosstrader_OrderCancellationResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::CrossTrader.Models.Remoting.OrderCancellationResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::CrossTrader.Models.Remoting.EntireOrderCancellationRequest> __Marshaller_crosstrader_EntireOrderCancellationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::CrossTrader.Models.Remoting.EntireOrderCancellationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::CrossTrader.Models.Remoting.EntireOrderCancellationResponse> __Marshaller_crosstrader_EntireOrderCancellationResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::CrossTrader.Models.Remoting.EntireOrderCancellationResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::CrossTrader.Models.Remoting.OrdersRequest, global::CrossTrader.Models.Remoting.OrdersResponse> __Method_GetOrders = new grpc::Method<global::CrossTrader.Models.Remoting.OrdersRequest, global::CrossTrader.Models.Remoting.OrdersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetOrders",
        __Marshaller_crosstrader_OrdersRequest,
        __Marshaller_crosstrader_OrdersResponse);

    static readonly grpc::Method<global::CrossTrader.Models.Remoting.InstrumentIdRequest, global::CrossTrader.Models.Remoting.OrdersResponse> __Method_SubscribeOrders = new grpc::Method<global::CrossTrader.Models.Remoting.InstrumentIdRequest, global::CrossTrader.Models.Remoting.OrdersResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SubscribeOrders",
        __Marshaller_crosstrader_InstrumentIdRequest,
        __Marshaller_crosstrader_OrdersResponse);

    static readonly grpc::Method<global::CrossTrader.Models.Remoting.PostOrderRequest, global::CrossTrader.Models.Remoting.OrderMessage> __Method_PostOrder = new grpc::Method<global::CrossTrader.Models.Remoting.PostOrderRequest, global::CrossTrader.Models.Remoting.OrderMessage>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostOrder",
        __Marshaller_crosstrader_PostOrderRequest,
        __Marshaller_crosstrader_OrderMessage);

    static readonly grpc::Method<global::CrossTrader.Models.Remoting.OrderCancellationRequest, global::CrossTrader.Models.Remoting.OrderCancellationResponse> __Method_CancelOrder = new grpc::Method<global::CrossTrader.Models.Remoting.OrderCancellationRequest, global::CrossTrader.Models.Remoting.OrderCancellationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CancelOrder",
        __Marshaller_crosstrader_OrderCancellationRequest,
        __Marshaller_crosstrader_OrderCancellationResponse);

    static readonly grpc::Method<global::CrossTrader.Models.Remoting.EntireOrderCancellationRequest, global::CrossTrader.Models.Remoting.EntireOrderCancellationResponse> __Method_CancelAllOrders = new grpc::Method<global::CrossTrader.Models.Remoting.EntireOrderCancellationRequest, global::CrossTrader.Models.Remoting.EntireOrderCancellationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CancelAllOrders",
        __Marshaller_crosstrader_EntireOrderCancellationRequest,
        __Marshaller_crosstrader_EntireOrderCancellationResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::CrossTrader.Models.Remoting.OrdersReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for OrdersService</summary>
    public partial class OrdersServiceClient : grpc::ClientBase<OrdersServiceClient>
    {
      /// <summary>Creates a new client for OrdersService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public OrdersServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for OrdersService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public OrdersServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected OrdersServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected OrdersServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Get available orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CrossTrader.Models.Remoting.OrdersResponse GetOrders(global::CrossTrader.Models.Remoting.OrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOrders(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get available orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CrossTrader.Models.Remoting.OrdersResponse GetOrders(global::CrossTrader.Models.Remoting.OrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetOrders, null, options, request);
      }
      /// <summary>
      /// Get available orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CrossTrader.Models.Remoting.OrdersResponse> GetOrdersAsync(global::CrossTrader.Models.Remoting.OrdersRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOrdersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get available orders
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CrossTrader.Models.Remoting.OrdersResponse> GetOrdersAsync(global::CrossTrader.Models.Remoting.OrdersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetOrders, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::CrossTrader.Models.Remoting.OrdersResponse> SubscribeOrders(global::CrossTrader.Models.Remoting.InstrumentIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeOrders(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::CrossTrader.Models.Remoting.OrdersResponse> SubscribeOrders(global::CrossTrader.Models.Remoting.InstrumentIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SubscribeOrders, null, options, request);
      }
      /// <summary>
      /// Send new order
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CrossTrader.Models.Remoting.OrderMessage PostOrder(global::CrossTrader.Models.Remoting.PostOrderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostOrder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Send new order
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::CrossTrader.Models.Remoting.OrderMessage PostOrder(global::CrossTrader.Models.Remoting.PostOrderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostOrder, null, options, request);
      }
      /// <summary>
      /// Send new order
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CrossTrader.Models.Remoting.OrderMessage> PostOrderAsync(global::CrossTrader.Models.Remoting.PostOrderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostOrderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Send new order
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::CrossTrader.Models.Remoting.OrderMessage> PostOrderAsync(global::CrossTrader.Models.Remoting.PostOrderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostOrder, null, options, request);
      }
      public virtual global::CrossTrader.Models.Remoting.OrderCancellationResponse CancelOrder(global::CrossTrader.Models.Remoting.OrderCancellationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelOrder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::CrossTrader.Models.Remoting.OrderCancellationResponse CancelOrder(global::CrossTrader.Models.Remoting.OrderCancellationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CancelOrder, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::CrossTrader.Models.Remoting.OrderCancellationResponse> CancelOrderAsync(global::CrossTrader.Models.Remoting.OrderCancellationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelOrderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::CrossTrader.Models.Remoting.OrderCancellationResponse> CancelOrderAsync(global::CrossTrader.Models.Remoting.OrderCancellationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CancelOrder, null, options, request);
      }
      public virtual global::CrossTrader.Models.Remoting.EntireOrderCancellationResponse CancelAllOrders(global::CrossTrader.Models.Remoting.EntireOrderCancellationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelAllOrders(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::CrossTrader.Models.Remoting.EntireOrderCancellationResponse CancelAllOrders(global::CrossTrader.Models.Remoting.EntireOrderCancellationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CancelAllOrders, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::CrossTrader.Models.Remoting.EntireOrderCancellationResponse> CancelAllOrdersAsync(global::CrossTrader.Models.Remoting.EntireOrderCancellationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelAllOrdersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::CrossTrader.Models.Remoting.EntireOrderCancellationResponse> CancelAllOrdersAsync(global::CrossTrader.Models.Remoting.EntireOrderCancellationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CancelAllOrders, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override OrdersServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new OrdersServiceClient(configuration);
      }
    }

  }
}
#endregion
