syntax = "proto3";

package crosstrader;
option csharp_namespace = "CrossTrader.Models.Remoting";

import "common.proto";
import "google/protobuf/timestamp.proto";

// Orders
message OrdersRequest {
    int32 instrument_id = 1;
    int32 limit = 2;
    OrderState state = 3;
    OrderItemMessage before = 4;
    OrderItemMessage after = 5;
}

message OrderItemMessage {
    string id = 1;
    string request_id = 2;
    OrderSide side = 3;
    double outstanding_size = 4;
    double price = 5;
    double average_price = 6;
    OrderState state = 7;
    OrderType type = 8;
    google.protobuf.Timestamp ordered_at = 9;
}

message OrdersMessage {
    int32 instrument_id = 1;
    repeated OrderItemMessage orders = 2;
}


// Positions
message PositionItemMessage {
    OrderSide side = 1;
    double price = 2;
    double size = 3;
    google.protobuf.Timestamp opened_at = 4;
}

message PositionsMessage {
    int32 instrument_id = 1;
    repeated OrderItemMessage positions = 2;
}


// Ordering
// Order request that can be requested for all exchanges.
message MarketOrderRequest {
    int32 instrument_id = 1;
    OrderSide side = 2;
    double size = 3;
}
// Order request that can be requested for all exchanges.
message LimitOrderRequest {
    int32 instrument_id = 6;
    OrderSide side = 2;
    double size = 3;
    double price = 4;
}
message OrderParametersResponse {
    string request_id = 1;
    OrderSide side = 2;
    OrderType type = 3;
    double size = 4;
    double price = 5;
    google.protobuf.Timestamp created_at = 6;
}
message OrderCancellationRequest {
    int32 instrument_id = 1;
    string order_id = 2;
    string request_id = 3;
}
message EntireOrderCancellationRequest {
    int32 instrument_id = 1;
}
message OrderCancellationResponse {
    bool canceled = 3;
}
message EntireOrderCancellationResponse {
    bool canceled = 1;
}




service OrdersService {
    // Orders
    rpc GetOrders(OrdersRequest) returns (OrdersMessage);
    rpc SubscribeOrders(InstrumentIdRequest) returns (stream OrdersMessage);

    // Positions
    rpc GetPositions(InstrumentIdRequest) returns (PositionsMessage);
    rpc SubscribePositions(InstrumentIdRequest) returns (stream PositionsMessage);

    // Ordering
    rpc MarketOrder(MarketOrderRequest) returns (OrderParametersResponse);
    rpc LimitOrder(LimitOrderRequest) returns (OrderParametersResponse);
    rpc CancelOrder(OrderCancellationRequest) returns (OrderCancellationResponse);
    rpc CancelAllOrders(EntireOrderCancellationRequest) returns (EntireOrderCancellationResponse);
}
